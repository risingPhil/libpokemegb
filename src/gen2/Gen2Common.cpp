#include "gen2/Gen2Common.h"
#include "gen2/Gen2GameReader.h"
#include "SaveManager.h"
#include "RomReader.h"
#include "utils.h"
#include "common.h"

#include <cstdlib>
#include <cstring>

#define POKEMON_GOLD_CARTRIDGE_TITLE "POKEMON_GLD"
#define POKEMON_SILVER_CARTRIDGE_TITLE "POKEMON_SLV"
#define POKEMON_CRYSTAL_CARTRIDGE_TITLE "PM_CRYSTAL"

uint16_t gen2_iconColorPalette[4] = {
	0x7FFF,
	0x2A5E,
	0x10FE,
	0x0
};

static uint8_t gen2_statsFingerPrint[] = {
	0x01, 0x2D, 0x31, 0x31, 0x2D, 0x41, 0x41, 0x16,
	0x03, 0x2D, 0x40, 0x00, 0x00, 0x1F, 0x64, 0x14
};

static TextCodePair gen2TextCodesMain[] = {
	{0x56, u8"‚Ä¶‚Ä¶"},
	{0x5D, u8"TRAINER"},
	{0x60, u8"‚ñà"},
	{0x61, u8"‚ñ≤"},
	{0x74, u8"„Éª"},
	{0x75, u8"‚Ä¶"},
	{0x7F, u8" "},
	{0x80, u8"A"},
	{0x81, u8"B"},
	{0x82, u8"C"},
	{0x83, u8"D"},
	{0x84, u8"E"},
	{0x85, u8"F"},
	{0x86, u8"G"},
	{0x87, u8"H"},
	{0x88, u8"I"},
	{0x89, u8"J"},
	{0x8A, u8"K"},
	{0x8B, u8"L"},
	{0x8C, u8"M"},
	{0x8D, u8"N"},
	{0x8E, u8"O"},
	{0x8F, u8"P"},
	{0x90, u8"Q"},
	{0x91, u8"R"},
	{0x92, u8"S"},
	{0x93, u8"T"},
	{0x94, u8"U"},
	{0x95, u8"V"},
	{0x96, u8"W"},
	{0x97, u8"X"},
	{0x98, u8"Y"},
	{0x99, u8"Z"},
	{0x9A, u8"("},
	{0x9B, u8")"},
	{0x9C, u8":"},
	{0x9D, u8";"},
	{0x9E, u8"["},
	{0x9F, u8"]"},
	{0xA0, u8"a"},
	{0xA1, u8"b"},
	{0xA2, u8"c"},
	{0xA3, u8"d"},
	{0xA4, u8"e"},
	{0xA5, u8"f"},
	{0xA6, u8"g"},
	{0xA7, u8"h"},
	{0xA8, u8"i"},
	{0xA9, u8"j"},
	{0xAA, u8"k"},
	{0xAB, u8"l"},
	{0xAC, u8"m"},
	{0xAD, u8"n"},
	{0xAE, u8"o"},
	{0xAF, u8"p"},
	{0xB0, u8"q"},
	{0xB1, u8"r"},
	{0xB2, u8"s"},
	{0xB3, u8"t"},
	{0xB4, u8"u"},
	{0xB5, u8"v"},
	{0xB6, u8"w"},
	{0xB7, u8"x"},
	{0xB8, u8"y"},
	{0xB9, u8"z"},
	{0xBA, u8"√†"},
	{0xBB, u8"√®"},
	{0xBD, u8"√π"},
	{0xBE, u8"√ü"},
	{0xBF, u8"√ß"},
	{0xC0, u8"√Ñ"},
	{0xC1, u8"√ñ"},
	{0xC2, u8"√ú"},
	{0xC3, u8"√§"},
	{0xC4, u8"√∂"},
	{0xC5, u8"√º"},
	{0xC6, u8"√´"},
	{0xC7, u8"√Ø"},
	{0xC8, u8"√¢"},
	{0xC9, u8"√¥"},
	{0xCA, u8"√ª"},
	{0xCB, u8"√™"},
	{0xCC, u8"√Æ"},
	{0xD0, u8"'d"},
	{0xD1, u8"'l"},
	{0xD2, u8"'m"},
	{0xD3, u8"'r"},
	{0xD4, u8"'s"},
	{0xD5, u8"'t"},
	{0xD6, u8"'v"},
	{0xE0, u8"\'"},
	{0xE1, u8"PK"},
	{0xE2, u8"MN"},
	{0xE3, u8"-"},
	{0xE6, u8"?"},
	{0xE7, u8"!"},
	{0xE8, u8"."},
	{0xE9, u8"&"},
	{0xEA, u8"√©"},
	{0xEB, u8"ü°Ü"},
	{0xEC, u8"‚ñ∑"},
	{0xED, u8"‚ñ∂"},
	{0xEE, u8"‚ñº"},
	{0xEF, u8"‚ôÇ"},
	{0xF0, u8"¬•"},
	{0xF1, u8"√ó"},
	{0xF3, u8"/"},
	{0xF4, u8","},
	{0xF5, u8"‚ôÄ"},
	{0xF6, u8"0"},
	{0xF7, u8"1"},
	{0xF8, u8"2"},
	{0xF9, u8"3"},
	{0xFA, u8"4"},
	{0xFB, u8"5"},
	{0xFC, u8"6"},
	{0xFD, u8"7"},
	{0xFE, u8"8"},
	{0xFF, u8"9"},
	{0x51, u8" "}
};

static const TextCodePair gen2TextCodesJpn[] = {
	{0x01, u8"„Ç§„Çô"},
	{0x02, u8"„É¥"},
	{0x03, u8"„Ç®„Çô"},
	{0x04, u8"„Ç™„Çô"},
	{0x05, u8"„Ç¨"},
	{0x06, u8"„ÇÆ"},
	{0x07, u8"„Ç∞"},
	{0x08, u8"„Ç≤"},
	{0x09, u8"„Ç¥"},
	{0x0A, u8"„Ç∂"},
	{0x0B, u8"„Ç∏"},
	{0x0C, u8"„Ç∫"},
	{0x0D, u8"„Çº"},
	{0x0E, u8"„Çæ"},
	{0x0F, u8"„ÉÄ"},
	{0x10, u8"„ÉÇ"},
	{0x11, u8"„ÉÖ"},
	{0x12, u8"„Éá"},
	{0x13, u8"„Éâ"},
	{0x14, u8"„Éä„Çô"},
	{0x15, u8"„Éã„Çô"},
	{0x16, u8"„Éå„Çô"},
	{0x17, u8"„Éç„Çô"},
	{0x18, u8"„Éé„Çô"},
	{0x19, u8"„Éê"},
	{0x1A, u8"„Éì"},
	{0x1B, u8"„Éñ"},
	{0x1C, u8"„Éú"},
	{0x1D, u8"„Éû„Çô"},
	{0x1E, u8"„Éü„Çô"},
	{0x1F, u8"„É†„Çô"},
	{0x20, u8"„Ç£„Çô"},
	{0x21, u8"„ÅÇ„Çô"},
	{0x22, u8"„ÅÑ„Çô"},
	{0x23, u8"„Çî"},
	{0x24, u8"„Åà„Çô"},
	{0x25, u8"„Åä„Çô"},
	{0x26, u8"„Åå"},
	{0x27, u8"„Åé"},
	{0x28, u8"„Åê"},
	{0x29, u8"„Åí"},
	{0x2A, u8"„Åî"},
	{0x2B, u8"„Åñ"},
	{0x2C, u8"„Åò"},
	{0x2D, u8"„Åö"},
	{0x2E, u8"„Åú"},
	{0x2F, u8"„Åû"},
	{0x30, u8"„Å†"},
	{0x31, u8"„Å¢"},
	{0x32, u8"„Å•"},
	{0x33, u8"„Åß"},
	{0x34, u8"„Å©"},
	{0x35, u8"„Å™„Çô"},
	{0x36, u8"„Å´„Çô"},
	{0x37, u8"„Å¨„Çô"},
	{0x38, u8"„Å≠„Çô"},
	{0x39, u8"„ÅÆ„Çô"},
	{0x3A, u8"„Å∞"},
	{0x3B, u8"„Å≥"},
	{0x3C, u8"„Å∂"},
	{0x3D, u8"„Åπ"},
	{0x3E, u8"„Åº"},
	{0x3F, u8"„Åæ„Çô"},
	{0x40, u8"„Éë"},
	{0x41, u8"„Éî"},
	{0x42, u8"„Éó"},
	{0x43, u8"„Éù"},
	{0x44, u8"„Å±"},
	{0x45, u8"„Å¥"},
	{0x46, u8"„Å∑"},
	{0x47, u8"„Å∫"},
	{0x48, u8"„ÅΩ"},
	{0x49, u8"„Åæ„Çö"},
	{0x4D, u8"„ÇÇ„Çö"},
	{0x4F, u8" "},
	{0x57, u8"#"},
	{0x51, u8"*"},
	{0x52, u8"A1"},
	{0x53, u8"A2"},
	{0x54, u8"POK√©"},
	{0x55, u8"+"},
	{0x58, u8"$"},
	{0x5D, u8"TRAINER"},
	{0x75, u8"‚Ä¶"},
	{0x7F, u8" "},
	{0x60, u8"A"},
	{0x61, u8"‚ñ≤"},
	{0x62, u8"?"},
	{0x63, u8"D"},
	{0x64, u8"E"},
	{0x65, u8"F"},
	{0x66, u8"G"},
	{0x67, u8"H"},
	{0x68, u8"I"},
	{0x69, u8"V"},
	{0x6A, u8"S"},
	{0x6B, u8"L"},
	{0x6C, u8"M"},
	{0x6D, u8"Ôºö"},
	{0x6E, u8"„ÅÉ"},
	{0x6F, u8"„ÅÖ"},
	{0x70, u8"„Äå"},
	{0x71, u8"„Äç"},
	{0x72, u8"„Äé"},
	{0x73, u8"„Äè"},
	{0x74, u8"„Éª"},
	{0x75, u8"‚Ä¶"},
	{0x76, u8"„ÅÅ"},
	{0x77, u8"„Åá"},
	{0x78, u8"„Åâ"},
	{0x80, u8"„Ç¢"},
	{0x81, u8"„Ç§"},
	{0x82, u8"„Ç¶"},
	{0x83, u8"„Ç®"},
	{0x84, u8"„Ç™"},
	{0x85, u8"„Ç´"},
	{0x86, u8"„Ç≠"},
	{0x87, u8"„ÇØ"},
	{0x88, u8"„Ç±"},
	{0x89, u8"„Ç≥"},
	{0x8A, u8"„Çµ"},
	{0x8B, u8"„Ç∑"},
	{0x8C, u8"„Çπ"},
	{0x8D, u8"„Çª"},
	{0x8E, u8"„ÇΩ"},
	{0x8F, u8"„Çø"},
	{0x90, u8"„ÉÅ"},
	{0x91, u8"„ÉÑ"},
	{0x92, u8"„ÉÜ"},
	{0x93, u8"„Éà"},
	{0x94, u8"„Éä"},
	{0x95, u8"„Éã"},
	{0x96, u8"„Éå"},
	{0x97, u8"„Éç"},
	{0x98, u8"„Éé"},
	{0x99, u8"„Éè"},
	{0x9A, u8"„Éí"},
	{0x9B, u8"„Éï"},
	{0x9C, u8"„Éõ"},
	{0x9D, u8"„Éû"},
	{0x9E, u8"„Éü"},
	{0x9F, u8"„É†"},
	{0xA0, u8"„É°"},
	{0xA1, u8"„É¢"},
	{0xA2, u8"„É§"},
	{0xA3, u8"„É¶"},
	{0xA4, u8"„É®"},
	{0xA5, u8"„É©"},
	{0xA6, u8"„É´"},
	{0xA7, u8"„É¨"},
	{0xA8, u8"„É≠"},
	{0xA9, u8"„ÉØ"},
	{0xAA, u8"„É≤"},
	{0xAB, u8"„É≥"},
	{0xAC, u8"„ÉÉ"},
	{0xAD, u8"„É£"},
	{0xAE, u8"„É•"},
	{0xAF, u8"„Éß"},
	{0xB0, u8"„Ç£"},
	{0xB1, u8"„ÅÇ"},
	{0xB2, u8"„ÅÑ"},
	{0xB3, u8"„ÅÜ"},
	{0xB4, u8"„Åà"},
	{0xB5, u8"„Åä"},
	{0xB6, u8"„Åã"},
	{0xB7, u8"„Åç"},
	{0xB8, u8"„Åè"},
	{0xB9, u8"„Åë"},
	{0xBA, u8"„Åì"},
	{0xBB, u8"„Åï"},
	{0xBC, u8"„Åó"},
	{0xBD, u8"„Åô"},
	{0xBE, u8"„Åõ"},
	{0xBF, u8"„Åù"},
	{0xC0, u8"„Åü"},
	{0xC1, u8"„Å°"},
	{0xC2, u8"„Å§"},
	{0xC3, u8"„Å¶"},
	{0xC4, u8"„Å®"},
	{0xC5, u8"„Å™"},
	{0xC6, u8"„Å´"},
	{0xC7, u8"„Å¨"},
	{0xC8, u8"„Å≠"},
	{0xC9, u8"„ÅÆ"},
	{0xCA, u8"„ÅØ"},
	{0xCB, u8"„Å≤"},
	{0xCC, u8"„Åµ"},
	{0xCD, u8"„Å∏"},
	{0xCE, u8"„Åª"},
	{0xCF, u8"„Åæ"},
	{0xD0, u8"„Åø"},
	{0xD1, u8"„ÇÄ"},
	{0xD2, u8"„ÇÅ"},
	{0xD3, u8"„ÇÇ"},
	{0xD4, u8"„ÇÑ"},
	{0xD5, u8"„ÇÜ"},
	{0xD6, u8"„Çà"},
	{0xD7, u8"„Çâ"},
	{0xD8, u8"„É™"},
	{0xD9, u8"„Çã"},
	{0xDA, u8"„Çå"},
	{0xDB, u8"„Çç"},
	{0xDC, u8"„Çè"},
	{0xDD, u8"„Çí"},
	{0xDE, u8"„Çì"},
	{0xDF, u8"„Å£"},
	{0xE0, u8"„ÇÉ"},
	{0xE1, u8"„ÇÖ"},
	{0xE2, u8"„Çá"},
	{0xE3, u8"„Éº"},
	{0xE4, u8"„Çú"},
	{0xE5, u8"„Çõ"},
	{0xE6, u8"?"},
	{0xE7, u8"!"},
	{0xE8, u8"„ÄÇ"},
	{0xE9, u8"„Ç°"},
	{0xEA, u8"„Ç•"},
	{0xEB, u8"„Çß"},
	{0xEC, u8"‚ñ∑"},
	{0xED, u8"‚ñ∂"},
	{0xEE, u8"‚ñº"},
	{0xEF, u8"‚ôÇ"},
	{0xF0, u8"ÂÜÜ"},
	{0xF1, u8"√ó"},
	{0xF2, u8"."},
	{0xF3, u8"/"},
	{0xF4, u8"„Ç©"},
	{0xF5, u8"‚ôÄ"},
	{0xF6, u8"0"},
	{0xF7, u8"1"},
	{0xF8, u8"2"},
	{0xF9, u8"3"},
	{0xFA, u8"4"},
	{0xFB, u8"5"},
	{0xFC, u8"6"},
	{0xFD, u8"7"},
	{0xFE, u8"8"},
	{0xFF, u8"9"}
};

// Based on https://bulbapedia.bulbagarden.net/wiki/Korean_character_encoding_(Generation_II)#Character_map

static const TextCodePair gen2TextCodesKorean0[] = {
	{0x00, u8"„Ñ±"},
	{0x01, u8"„Ñ¥"},
	{0x02, u8"„Ñ∑"},
	{0x03, u8"„Ñπ"},
	{0x04, u8"„ÖÅ"},
	{0x05, u8"„ÖÇ"},
	{0x06, u8"„ÖÖ"},
	{0x07, u8"„Öá"},
	{0x08, u8"„Öà"},
	{0x09, u8"„Öä"},
	{0x0A, u8"„Öã"},
	{0x0B, u8"„Öå"},
	{0x0C, u8"„Öç"},
	{0x0D, u8"„Öé"},
	{0x0E, u8"„Ñ≤"},
	{0x0F, u8"„Ñ∏"},
	{0x10, u8"„ÖÉ"},
	{0x11, u8"„ÖÜ"},
	{0x12, u8"„Öâ"},
	{0x20, u8"„Öè"},
	{0x21, u8"„Öë"},
	{0x22, u8"„Öì"},
	{0x23, u8"„Öï"},
	{0x24, u8"„Öó"},
	{0x25, u8"„Öõ"},
	{0x26, u8"„Öú"},
	{0x27, u8"„Ö†"},
	{0x28, u8"„Ö°"},
	{0x29, u8"„Ö£"},
	{0x2A, u8"„Öê"},
	{0x2B, u8"„Öí"},
	{0x2C, u8"„Öî"},
	{0x2D, u8"„Öñ"},
	{0x2E, u8"„Öò"},
	{0x2F, u8"„Öô"},
	{0x30, u8"„Öö"},
	{0x31, u8"„Öù"},
	{0x32, u8"„Öû"},
	{0x33, u8"„Öü"},
	{0x34, u8"„Ö¢"},
	{0x3E, u8"_"},
	{0x3F, u8"-"},
	{0x60, u8"„Äå"},
	{0x61, u8"„Äç"},
	{0x62, u8"„Äé"},
	{0x63, u8"„Äè"},
	{0x64, u8"("},
	{0x65, u8")"},
	{0x66, u8"!"},
	{0x67, u8"?"},
	{0x68, u8"-"},
	{0x69, u8"~"},
	{0x6A, u8"‚Ä¶"},
	{0x6B, u8","},
	{0x6C, u8"."},
	{0xF0, u8"0"},
	{0xF1, u8"1"},
	{0xF2, u8"2"},
	{0xF3, u8"3"},
	{0xF4, u8"4"},
	{0xF5, u8"5"},
	{0xF6, u8"6"},
	{0xF7, u8"7"},
	{0xF8, u8"8"},
	{0xF9, u8"9"}
};

static const TextCodePair gen2TextCodesKorean1[] = {
	{0x01, u8"Í∞Ä"},
	{0x02, u8"Í∞Å"},
	{0x03, u8"Í∞Ñ"},
	{0x04, u8"Í∞á"},
	{0x05, u8"Í∞à"},
	{0x06, u8"Í∞â"},
	{0x07, u8"Í∞ä"},
	{0x08, u8"Í∞ê"},
	{0x09, u8"Í∞ë"},
	{0x0A, u8"Í∞í"},
	{0x0B, u8"Í∞ì"},
	{0x0C, u8"Í∞î"},
	{0x0D, u8"Í∞ï"},
	{0x0E, u8"Í∞ñ"},
	{0x0F, u8"Í∞ó"},
	{0x10, u8"Í∞ô"},
	{0x11, u8"Í∞ö"},
	{0x12, u8"Í∞õ"},
	{0x13, u8"Í∞ú"},
	{0x14, u8"Í∞ù"},
	{0x15, u8"Í∞†"},
	{0x16, u8"Í∞§"},
	{0x17, u8"Í∞¨"},
	{0x18, u8"Í∞≠"},
	{0x19, u8"Í∞Ø"},
	{0x1A, u8"Í∞∞"},
	{0x1B, u8"Í∞±"},
	{0x1C, u8"Í∞∏"},
	{0x1D, u8"Í∞π"},
	{0x1E, u8"Í∞º"},
	{0x1F, u8"Í±Ä"},
	{0x20, u8"Í±Ä"},
	{0x21, u8"Í±ç"},
	{0x22, u8"Í±î"},
	{0x23, u8"Í±ò"},
	{0x24, u8"Í±ú"},
	{0x25, u8"Í±∞"},
	{0x26, u8"Í±±"},
	{0x27, u8"Í±¥"},
	{0x28, u8"Í±∑"},
	{0x29, u8"Í±∏"},
	{0x2A, u8"Í±∫"},
	{0x2B, u8"Í≤Ä"},
	{0x2C, u8"Í≤Å"},
	{0x2D, u8"Í≤É"},
	{0x2E, u8"Í≤Ñ"},
	{0x2F, u8"Í≤Ö"},
	{0x30, u8"Í≤Ü"},
	{0x31, u8"Í≤â"},
	{0x32, u8"Í≤ä"},
	{0x33, u8"Í≤ã"},
	{0x34, u8"Í≤å"},
	{0x35, u8"Í≤ê"},
	{0x36, u8"Í≤î"},
	{0x37, u8"Í≤ú"},
	{0x38, u8"Í≤ù"},
	{0x39, u8"Í≤ü"},
	{0x3A, u8"Í≤†"},
	{0x3B, u8"Í≤°"},
	{0x3C, u8"Í≤®"},
	{0x3D, u8"Í≤©"},
	{0x3E, u8"Í≤™"},
	{0x3F, u8"Í≤¨"},
	{0x40, u8"Í≤Ø"},
	{0x41, u8"Í≤∞"},
	{0x42, u8"Í≤π"},
	{0x43, u8"Í≤∏"},
	{0x44, u8"Í≤ª"},
	{0x45, u8"Í≤º"},
	{0x46, u8"Í≤Ω"},
	{0x47, u8"Í≥Å"},
	{0x48, u8"Í≥Ñ"},
	{0x49, u8"Í≥à"},
	{0x4A, u8"Í≥å"},
	{0x4B, u8"Í≥ï"},
	{0x4C, u8"Í≥ó"},
	{0x4D, u8"Í≥†"},
	{0x4E, u8"Í≥°"},
	{0x4F, u8"Í≥§"},
	{0x60, u8"Í≥ß"},
	{0x61, u8"Í≥®"},
	{0x62, u8"Í≥™"},
	{0x63, u8"Í≥¨"},
	{0x64, u8"Í≥Ø"},
	{0x65, u8"Í≥∞"},
	{0x66, u8"Í≥±"},
	{0x67, u8"Í≥≥"},
	{0x68, u8"Í≥µ"},
	{0x69, u8"Í≥∂"},
	{0x6A, u8"Í≥º"},
	{0x6B, u8"Í≥Ω"},
	{0x6C, u8"Í¥Ä"},
	{0x6D, u8"Í¥Ñ"},
	{0x6E, u8"Í¥Ü"},
	{0x71, u8"Í¥å"},
	{0x72, u8"Í¥ç"},
	{0x73, u8"Í¥è"},
	{0x74, u8"Í¥ë"},
	{0x75, u8"Í¥ò"},
	{0x76, u8"Í¥ú"},
	{0x77, u8"Í¥†"},
	{0x78, u8"Í¥©"},
	{0x79, u8"Í¥©"},
	{0x7A, u8"Í¥≠"},
	{0x7B, u8"Í¥¥"},
	{0x7C, u8"Í¥µ"},
	{0x7D, u8"Í¥∏"},
	{0x7E, u8"Í¥º"},
	{0x7F, u8"Í¥ª"},
	{0x80, u8"ÍµÖ"},
	{0x81, u8"Íµá"},
	{0x82, u8"Íµâ"},
	{0x83, u8"Íµê"},
	{0x84, u8"Íµî"},
	{0x85, u8"Íµò"},
	{0x86, u8"Íµ°"},
	{0x87, u8"Íµ£"},
	{0x88, u8"Íµ¨"},
	{0x89, u8"Íµ≠"},
	{0x8A, u8"Íµ∞"},
	{0x8B, u8"Íµ≥"},
	{0x8C, u8"Íµ¥"},
	{0x8D, u8"Íµµ"},
	{0x8E, u8"Íµ∂"},
	{0x8F, u8"Íµª"},
	{0x90, u8"Íµº"},
	{0x91, u8"ÍµΩ"},
	{0x92, u8"Íµø"},
	{0x93, u8"Í∂Å"},
	{0x94, u8"Í∂Ç"},
	{0x95, u8"Í∂à"},
	{0x96, u8"Í∂â"},
	{0x97, u8"Í∂å"},
	{0x98, u8"Í∂ê"},
	{0x99, u8"Í∂ú"},
	{0x9A, u8"Í∂ù"},
	{0x9B, u8"Í∂§"},
	{0x9C, u8"Í∂∑"},
	{0x9D, u8"Í∑Ä"},
	{0x9E, u8"Í∑Å"},
	{0x9F, u8"Í∑Ñ"},
	{0xA0, u8"Í∑à"},
	{0xA1, u8"Í∑ê"},
	{0xA2, u8"Í∑ë"},
	{0xA3, u8"Í∑ì"},
	{0xA4, u8"Í∑ú"},
	{0xA5, u8"Í∑†"},
	{0xA6, u8"Í∑§"},
	{0xA7, u8"Í∑∏"},
	{0xA8, u8"Í∑π"},
	{0xA9, u8"Í∑º"},
	{0xAA, u8"Í∑ø"},
	{0xAB, u8"Í∏Ä"},
	{0xAC, u8"Í∏Å"},
	{0xAD, u8"Í∏à"},
	{0xAE, u8"Í∏â"},
	{0xAF, u8"Í∏ã"},
	{0xB0, u8"Í∏ç"},
	{0xB1, u8"Í∏î"},
	{0xB2, u8"Í∏∞"},
	{0xB3, u8"Í∏±"},
	{0xB4, u8"Í∏¥"},
	{0xB5, u8"Í∏∑"},
	{0xB6, u8"Í∏∏"},
	{0xB7, u8"Í∏∫"},
	{0xB8, u8"ÍπÄ"},
	{0xB9, u8"ÍπÅ"},
	{0xBA, u8"ÍπÉ"},
	{0xBB, u8"ÍπÖ"},
	{0xBC, u8"ÍπÜ"},
	{0xBD, u8"Íπä"},
	{0xBE, u8"Íπå"},
	{0xBF, u8"Íπç"},
	{0xC0, u8"Íπé"},
	{0xC1, u8"Íπê"},
	{0xC2, u8"Íπî"},
	{0xC3, u8"Íπñ"},
	{0xC4, u8"Íπú"},
	{0xC5, u8"Íπù"},
	{0xC6, u8"Íπü"},
	{0xC7, u8"Íπ†"},
	{0xC8, u8"Íπ°"},
	{0xC9, u8"Íπ•"},
	{0xCA, u8"Íπ®"},
	{0xCB, u8"Íπ©"},
	{0xCC, u8"Íπ¨"},
	{0xCD, u8"Íπ∞"},
	{0xCE, u8"Íπ∏"},
	{0xD1, u8"Íππ"},
	{0xD2, u8"Íπª"},
	{0xD3, u8"Íπº"},
	{0xD4, u8"ÍπΩ"},
	{0xD5, u8"Í∫Ñ"},
	{0xD6, u8"Í∫Ö"},
	{0xD7, u8"Í∫å"},
	{0xD8, u8"Í∫º"},
	{0xD9, u8"Í∫Ω"},
	{0xDA, u8"Í∫æ"},
	{0xDB, u8"ÍªÄ"},
	{0xDC, u8"ÍªÑ"},
	{0xDD, u8"Íªå"},
	{0xDE, u8"Íªç"},
	{0xDF, u8"Íªè"},
	{0xE0, u8"Íªê"},
	{0xE1, u8"Íªë"},
	{0xE2, u8"Íªò"},
	{0xE3, u8"Íªô"},
	{0xE4, u8"Íªú"},
	{0xE5, u8"Íª®"},
	{0xE6, u8"Íª´"},
	{0xE7, u8"Íª≠"},
	{0xE8, u8"Íª¥"},
	{0xE9, u8"Íª∏"},
	{0xEA, u8"Íªº"},
	{0xEB, u8"Íºá"},
	{0xEC, u8"Íºà"},
	{0xED, u8"Íºç"},
	{0xEE, u8"Íºê"},
	{0xEF, u8"Íº¨"},
	{0xF0, u8"Íº≠"},
	{0xF1, u8"Íº∞"},
	{0xF2, u8"Íº≤"},
	{0xF3, u8"Íº¥"},
	{0xF4, u8"Íºº"},
	{0xF5, u8"ÍºΩ"},
	{0xF6, u8"Íºø"},
	{0xF7, u8"ÍΩÅ"},
	{0xF8, u8"ÍΩÇ"},
	{0xF9, u8"ÍΩÉ"},
	{0xFA, u8"ÍΩà"},
	{0xFB, u8"ÍΩâ"},
	{0xFC, u8"ÍΩê"},
	{0xFD, u8"ÍΩú"},
	{0xFE, u8"ÍΩù"},
	{0xFF, u8"ÍΩ§"}
};

static const TextCodePair gen2TextCodesKorean2[] = {
	{0x00, u8"ÍΩ•"},
	{0x01, u8"ÍΩπ"},
	{0x02, u8"ÍæÄ"},
	{0x03, u8"ÍæÑ"},
	{0x04, u8"Íæà"},
	{0x05, u8"Íæê"},
	{0x06, u8"Íæë"},
	{0x07, u8"Íæï"},
	{0x08, u8"Íæú"},
	{0x09, u8"Íæ∏"},
	{0x0A, u8"Íæπ"},
	{0x0B, u8"Íæº"},
	{0x0C, u8"ÍøÄ"},
	{0x0D, u8"Íøá"},
	{0x0E, u8"Íøà"},
	{0x0F, u8"Íøà"},
	{0x10, u8"Íøã"},
	{0x11, u8"Íøç"},
	{0x12, u8"Íøé"},
	{0x13, u8"Íøî"},
	{0x14, u8"Íøú"},
	{0x15, u8"Íø®"},
	{0x16, u8"Íø©"},
	{0x17, u8"Íø∞"},
	{0x18, u8"Íø±"},
	{0x19, u8"Íø¥"},
	{0x1A, u8"Íø∏"},
	{0x1B, u8"ÎÄÄ"},
	{0x1C, u8"ÎÄÅ"},
	{0x1D, u8"ÎÄÑ"},
	{0x1E, u8"ÎÄå"},
	{0x1F, u8"ÎÄê"},
	{0x20, u8"ÎÄî"},
	{0x21, u8"ÎÄú"},
	{0x22, u8"ÎÄù"},
	{0x23, u8"ÎÄ®"},
	{0x24, u8"ÎÅÑ"},
	{0x25, u8"ÎÅÖ"},
	{0x26, u8"ÎÅà"},
	{0x27, u8"ÎÅä"},
	{0x28, u8"ÎÅå"},
	{0x29, u8"ÎÅé"},
	{0x2A, u8"ÎÅì"},
	{0x2B, u8"ÎÅî"},
	{0x2C, u8"ÎÅï"},
	{0x2D, u8"ÎÅó"},
	{0x2E, u8"ÎÅô"},
	{0x31, u8"ÎÅù"},
	{0x32, u8"ÎÅº"},
	{0x33, u8"ÎÅΩ"},
	{0x34, u8"ÎÇÄ"},
	{0x35, u8"ÎÇÑ"},
	{0x36, u8"ÎÇå"},
	{0x37, u8"ÎÇç"},
	{0x38, u8"ÎÇè"},
	{0x39, u8"ÎÇë"},
	{0x3A, u8"ÎÇò"},
	{0x3B, u8"ÎÇô"},
	{0x3C, u8"ÎÇö"},
	{0x3D, u8"ÎÇú"},
	{0x3E, u8"ÎÇü"},
	{0x3F, u8"ÎÇ†"},
	{0x40, u8"ÎÇ°"},
	{0x41, u8"ÎÇ¢"},
	{0x42, u8"ÎÇ®"},
	{0x43, u8"ÎÇ©"},
	{0x44, u8"ÎÇ´"},
	{0x45, u8"ÎÇ¨"},
	{0x46, u8"ÎÇ≠"},
	{0x47, u8"ÎÇÆ"},
	{0x48, u8"ÎÇØ"},
	{0x49, u8"ÎÇ±"},
	{0x4A, u8"ÎÇ≥"},
	{0x4B, u8"ÎÇ¥"},
	{0x4C, u8"ÎÇµ"},
	{0x4D, u8"ÎÇ∏"},
	{0x4E, u8"ÎÇº"},
	{0x4F, u8"ÎÉÑ"},
	{0x60, u8"ÎÉÖ"},
	{0x61, u8"ÎÉá"},
	{0x62, u8"ÎÉà"},
	{0x63, u8"ÎÉâ"},
	{0x64, u8"ÎÉê"},
	{0x65, u8"ÎÉë"},
	{0x66, u8"ÎÉî"},
	{0x67, u8"ÎÉò"},
	{0x68, u8"ÎÉ†"},
	{0x69, u8"ÎÉ•"},
	{0x6A, u8"ÎÑà"},
	{0x6B, u8"ÎÑâ"},
	{0x6C, u8"ÎÑã"},
	{0x6D, u8"ÎÑå"},
	{0x6E, u8"ÎÑê"},
	{0x6F, u8"ÎÑí"},
	{0x70, u8"ÎÑì"},
	{0x71, u8"ÎÑò"},
	{0x72, u8"ÎÑô"},
	{0x73, u8"ÎÑõ"},
	{0x74, u8"ÎÑú"},
	{0x75, u8"ÎÑù"},
	{0x76, u8"ÎÑ£"},
	{0x77, u8"ÎÑ§"},
	{0x78, u8"ÎÑ•"},
	{0x79, u8"ÎÑ®"},
	{0x7A, u8"ÎÑ¨"},
	{0x7B, u8"ÎÑ¥"},
	{0x7C, u8"ÎÑµ"},
	{0x7D, u8"ÎÑ∑"},
	{0x7E, u8"ÎÑ∏"},
	{0x7F, u8"ÎÑπ"},
	{0x80, u8"ÎÖÄ"},
	{0x81, u8"ÎÖÅ"},
	{0x82, u8"ÎÖÑ"},
	{0x83, u8"ÎÖà"},
	{0x84, u8"ÎÖê"},
	{0x85, u8"ÎÖë"},
	{0x86, u8"ÎÖî"},
	{0x87, u8"ÎÖï"},
	{0x88, u8"ÎÖò"},
	{0x89, u8"ÎÖú"},
	{0x8A, u8"ÎÖ†"},
	{0x8B, u8"ÎÖ∏"},
	{0x8C, u8"ÎÖπ"},
	{0x8D, u8"ÎÖº"},
	{0x8E, u8"ÎÜÄ"},
	{0x8F, u8"ÎÜÇ"},
	{0x90, u8"ÎÜà"},
	{0x91, u8"ÎÜâ"},
	{0x92, u8"ÎÜã"},
	{0x93, u8"ÎÜç"},
	{0x94, u8"ÎÜí"},
	{0x95, u8"ÎÜì"},
	{0x96, u8"ÎÜî"},
	{0x97, u8"ÎÜò"},
	{0x98, u8"ÎÜú"},
	{0x99, u8"ÎÜ®"},
	{0x9A, u8"Îáå"},
	{0x9B, u8"Îáê"},
	{0x9C, u8"Îáî"},
	{0x9D, u8"Îáú"},
	{0x9E, u8"Îáù"},
	{0xA1, u8"Îáü"},
	{0xA2, u8"Îá®"},
	{0xA3, u8"Îá©"},
	{0xA4, u8"Îá¨"},
	{0xA5, u8"Îá∞"},
	{0xA6, u8"Îáπ"},
	{0xA7, u8"Îáª"},
	{0xA8, u8"ÎáΩ"},
	{0xA9, u8"ÎàÑ"},
	{0xAA, u8"ÎàÖ"},
	{0xAB, u8"Îàà"},
	{0xAC, u8"Îàã"},
	{0xAD, u8"Îàå"},
	{0xAE, u8"Îàî"},
	{0xAF, u8"Îàï"},
	{0xB0, u8"Îàó"},
	{0xB1, u8"Îàô"},
	{0xB2, u8"Îà†"},
	{0xB3, u8"Îà¥"},
	{0xB4, u8"Îàº"},
	{0xB5, u8"Îâò"},
	{0xB6, u8"Îâú"},
	{0xB7, u8"Îâ†"},
	{0xB8, u8"Îâ®"},
	{0xB9, u8"Îâ©"},
	{0xBA, u8"Îâ¥"},
	{0xBB, u8"Îâµ"},
	{0xBC, u8"Îâº"},
	{0xBD, u8"ÎäÑ"},
	{0xBE, u8"ÎäÖ"},
	{0xBF, u8"Îäâ"},
	{0xC0, u8"Îäê"},
	{0xC1, u8"Îäë"},
	{0xC2, u8"Îäî"},
	{0xC3, u8"Îäò"},
	{0xC4, u8"Îäô"},
	{0xC5, u8"Îäö"},
	{0xC6, u8"Îä†"},
	{0xC7, u8"Îä°"},
	{0xC8, u8"Îä£"},
	{0xC9, u8"Îä•"},
	{0xCA, u8"Îä¶"},
	{0xCB, u8"Îä™"},
	{0xCC, u8"Îä¨"},
	{0xCD, u8"Îä∞"},
	{0xCE, u8"Îä¥"},
	{0xCF, u8"Îãà"},
	{0xD0, u8"Îãâ"},
	{0xD1, u8"Îãå"},
	{0xD2, u8"Îãê"},
	{0xD3, u8"Îãí"},
	{0xD4, u8"Îãò"},
	{0xD5, u8"Îãô"},
	{0xD6, u8"Îãõ"},
	{0xD7, u8"Îãù"},
	{0xD8, u8"Îã¢"},
	{0xD9, u8"Îã§"},
	{0xDA, u8"Îã•"},
	{0xDB, u8"Îã¶"},
	{0xDC, u8"Îã®"},
	{0xDD, u8"Îã´"},
	{0xDE, u8"Îã¨"},
	{0xDF, u8"Îã≠"},
	{0xE0, u8"ÎãÆ"},
	{0xE1, u8"ÎãØ"},
	{0xE2, u8"Îã≥"},
	{0xE3, u8"Îã¥"},
	{0xE4, u8"Îãµ"},
	{0xE5, u8"Îã∑"},
	{0xE6, u8"Îã∏"},
	{0xE7, u8"Îãπ"},
	{0xE8, u8"Îã∫"},
	{0xE9, u8"Îãª"},
	{0xEA, u8"Îãø"},
	{0xEB, u8"ÎåÄ"},
	{0xEC, u8"ÎåÅ"},
	{0xED, u8"ÎåÑ"},
	{0xEE, u8"Îåà"},
	{0xEF, u8"Îåê"},
	{0xF0, u8"Îåë"},
	{0xF1, u8"Îåì"},
	{0xF2, u8"Îåî"},
	{0xF3, u8"Îåï"},
	{0xF5, u8"Îçî"},
	{0xF6, u8"Îçï"},
	{0xF7, u8"Îçñ"},
	{0xF8, u8"Îçò"},
	{0xF9, u8"Îçõ"},
	{0xFA, u8"Îçú"},
	{0xFB, u8"Îçû"},
	{0xFC, u8"Îçü"},
	{0xFD, u8"Îç§"},
	{0xFE, u8"Îç•"}
};

static const TextCodePair gen2TextCodesKorean3[] = {
	{0x01, u8"Îçß"},
	{0x02, u8"Îç©"},
	{0x03, u8"Îç´"},
	{0x04, u8"ÎçÆ"},
	{0x05, u8"Îç∞"},
	{0x06, u8"Îç±"},
	{0x07, u8"Îç¥"},
	{0x08, u8"Îç∏"},
	{0x09, u8"ÎéÄ"},
	{0x0A, u8"ÎéÅ"},
	{0x0B, u8"ÎéÉ"},
	{0x0C, u8"ÎéÑ"},
	{0x0D, u8"ÎéÖ"},
	{0x0E, u8"Îéå"},
	{0x0F, u8"Îéê"},
	{0x10, u8"Îéî"},
	{0x11, u8"Îé†"},
	{0x12, u8"Îé°"},
	{0x13, u8"Îé®"},
	{0x14, u8"Îé¨"},
	{0x15, u8"ÎèÑ"},
	{0x16, u8"ÎèÖ"},
	{0x17, u8"Îèà"},
	{0x18, u8"Îèã"},
	{0x19, u8"Îèå"},
	{0x1A, u8"Îèé"},
	{0x1C, u8"Îèî"},
	{0x1D, u8"Îèï"},
	{0x1E, u8"Îèó"},
	{0x1F, u8"Îèô"},
	{0x20, u8"Îèõ"},
	{0x21, u8"Îèù"},
	{0x22, u8"Îè†"},
	{0x23, u8"Îè§"},
	{0x24, u8"Îè®"},
	{0x25, u8"Îèº"},
	{0x26, u8"Îêê"},
	{0x27, u8"Îêò"},
	{0x28, u8"Îêú"},
	{0x29, u8"Îê†"},
	{0x2A, u8"Îê®"},
	{0x2B, u8"Îê©"},
	{0x2C, u8"Îê´"},
	{0x2D, u8"Îê¥"},
	{0x2E, u8"Îëê"},
	{0x2F, u8"Îëë"},
	{0x30, u8"Îëî"},
	{0x31, u8"Îëò"},
	{0x32, u8"Îë†"},
	{0x33, u8"Îë°"},
	{0x34, u8"Îë£"},
	{0x35, u8"Îë•"},
	{0x36, u8"Îë¨"},
	{0x37, u8"ÎíÄ"},
	{0x38, u8"Îíà"},
	{0x39, u8"Îíù"},
	{0x3A, u8"Îí§"},
	{0x3B, u8"Îí®"},
	{0x3C, u8"Îí¨"},
	{0x3D, u8"Îíµ"},
	{0x3E, u8"Îí∑"},
	{0x3F, u8"Îíπ"},
	{0x40, u8"ÎìÄ"},
	{0x41, u8"ÎìÑ"},
	{0x42, u8"Îìà"},
	{0x43, u8"Îìê"},
	{0x44, u8"Îìï"},
	{0x45, u8"Îìú"},
	{0x46, u8"Îìù"},
	{0x47, u8"Îì†"},
	{0x48, u8"Îì£"},
	{0x49, u8"Îì§"},
	{0x4A, u8"Îì¶"},
	{0x4B, u8"Îì¨"},
	{0x4C, u8"Îì≠"},
	{0x4D, u8"ÎìØ"},
	{0x4E, u8"Îì±"},
	{0x4F, u8"Îì∏"},
	{0x60, u8"Îîî"},
	{0x61, u8"Îîï"},
	{0x62, u8"Îîò"},
	{0x63, u8"Îîõ"},
	{0x64, u8"Îîú"},
	{0x65, u8"Îî§"},
	{0x66, u8"Îî•"},
	{0x67, u8"Îîß"},
	{0x68, u8"Îî®"},
	{0x69, u8"Îî©"},
	{0x6A, u8"Îî™"},
	{0x6B, u8"Îî∞"},
	{0x6C, u8"Îî±"},
	{0x6D, u8"Îî¥"},
	{0x6E, u8"Îî∏"},
	{0x71, u8"ÎïÄ"},
	{0x72, u8"ÎïÅ"},
	{0x73, u8"ÎïÉ"},
	{0x74, u8"ÎïÑ"},
	{0x75, u8"ÎïÖ"},
	{0x76, u8"Îïã"},
	{0x77, u8"Îïå"},
	{0x78, u8"Îïç"},
	{0x79, u8"Îïê"},
	{0x7A, u8"Îïî"},
	{0x7B, u8"Îïú"},
	{0x7C, u8"Îïù"},
	{0x7D, u8"Îïü"},
	{0x7E, u8"Îï†"},
	{0x7F, u8"Îï°"},
	{0x80, u8"Îñ†"},
	{0x81, u8"Îñ°"},
	{0x82, u8"Îñ§"},
	{0x83, u8"Îñ®"},
	{0x84, u8"Îñ™"},
	{0x85, u8"Îñ´"},
	{0x86, u8"Îñ∞"},
	{0x87, u8"Îñ±"},
	{0x88, u8"Îñ≥"},
	{0x89, u8"Îñ¥"},
	{0x8A, u8"Îñµ"},
	{0x8B, u8"Îñª"},
	{0x8C, u8"Îñº"},
	{0x8D, u8"ÎñΩ"},
	{0x8E, u8"ÎóÄ"},
	{0x8F, u8"ÎóÑ"},
	{0x90, u8"Îóå"},
	{0x91, u8"Îóç"},
	{0x92, u8"Îóè"},
	{0x93, u8"Îóê"},
	{0x94, u8"Îóë"},
	{0x95, u8"Îóò"},
	{0x96, u8"Îó¨"},
	{0x97, u8"Îòê"},
	{0x98, u8"Îòë"},
	{0x99, u8"Îòî"},
	{0x9A, u8"Îòò"},
	{0x9B, u8"Îò•"},
	{0x9C, u8"Îò¨"},
	{0x9D, u8"Îò¥"},
	{0x9E, u8"Îôà"},
	{0x9F, u8"Îô§"},
	{0xA0, u8"Îô®"},
	{0xA1, u8"Îöú"},
	{0xA2, u8"Îöù"},
	{0xA3, u8"Îö†"},
	{0xA4, u8"Îö§"},
	{0xA5, u8"Îö´"},
	{0xA6, u8"Îö¨"},
	{0xA7, u8"Îö±"},
	{0xA8, u8"Îõî"},
	{0xA9, u8"Îõ∞"},
	{0xAA, u8"Îõ¥"},
	{0xAB, u8"Îõ∏"},
	{0xAC, u8"ÎúÄ"},
	{0xAD, u8"ÎúÅ"},
	{0xAE, u8"ÎúÖ"},
	{0xAF, u8"Îú®"},
	{0xB0, u8"Îú©"},
	{0xB1, u8"Îú¨"},
	{0xB2, u8"ÎúØ"},
	{0xB3, u8"Îú∞"},
	{0xB4, u8"Îú∏"},
	{0xB5, u8"Îúπ"},
	{0xB6, u8"Îúª"},
	{0xB7, u8"ÎùÑ"},
	{0xB8, u8"Îùà"},
	{0xB9, u8"Îùå"},
	{0xBA, u8"Îùî"},
	{0xBB, u8"Îùï"},
	{0xBC, u8"Îù†"},
	{0xBD, u8"Îù§"},
	{0xBE, u8"Îù®"},
	{0xBF, u8"Îù∞"},
	{0xC0, u8"Îù±"},
	{0xC1, u8"Îù≥"},
	{0xC2, u8"Îùµ"},
	{0xC3, u8"Îùº"},
	{0xC4, u8"ÎùΩ"},
	{0xC5, u8"ÎûÄ"},
	{0xC6, u8"ÎûÑ"},
	{0xC7, u8"Îûå"},
	{0xC8, u8"Îûç"},
	{0xC9, u8"Îûè"},
	{0xCA, u8"Îûê"},
	{0xCB, u8"Îûë"},
	{0xCC, u8"Îûí"},
	{0xCD, u8"Îûñ"},
	{0xCE, u8"Îûó"},
	{0xD0, u8"Î¢î"},
	{0xD1, u8"Îûò"},
	{0xD2, u8"Îûô"},
	{0xD3, u8"Îûú"},
	{0xD4, u8"Îû†"},
	{0xD5, u8"Îû®"},
	{0xD6, u8"Îû©"},
	{0xD7, u8"Îû´"},
	{0xD8, u8"Îû¨"},
	{0xD9, u8"Îû≠"},
	{0xDA, u8"Îû¥"},
	{0xDB, u8"Îûµ"},
	{0xDC, u8"Îû∏"},
	{0xDD, u8"Îüá"},
	{0xDE, u8"Îüâ"},
	{0xDF, u8"Îü¨"},
	{0xE0, u8"Îü≠"},
	{0xE1, u8"Îü∞"},
	{0xE2, u8"Îü¥"},
	{0xE3, u8"Îüº"},
	{0xE4, u8"ÎüΩ"},
	{0xE5, u8"Îüø"},
	{0xE6, u8"Î†Ä"},
	{0xE7, u8"Î†Å"},
	{0xE8, u8"Î†á"},
	{0xE9, u8"Î†à"},
	{0xEA, u8"Î†â"},
	{0xEB, u8"Î†å"},
	{0xEC, u8"Î†ê"},
	{0xED, u8"Î†ò"},
	{0xEE, u8"Î†ô"},
	{0xEF, u8"Î†õ"},
	{0xF0, u8"Î†ù"},
	{0xF1, u8"Î†§"},
	{0xF2, u8"Î†•"},
	{0xF3, u8"Î†®"},
	{0xF4, u8"Î†¨"},
	{0xF5, u8"Î†¥"},
	{0xF6, u8"Î†µ"},
	{0xF7, u8"Î†∑"},
	{0xF8, u8"Î†∏"},
	{0xF9, u8"Î†π"},
	{0xFA, u8"Î°Ä"},
	{0xFB, u8"Î°Ñ"},
	{0xFC, u8"Î°ë"},
	{0xFD, u8"Î°ì"},
	{0xFE, u8"Î°ú"},
	{0xFF, u8"Î°ù"}
};

static const TextCodePair gen2TextCodesKorean4[] = {
	{0x00, u8"Î°†"},
	{0x01, u8"Î°§"},
	{0x02, u8"Î°¨"},
	{0x03, u8"Î°≠"},
	{0x04, u8"Î°Ø"},
	{0x05, u8"Î°±"},
	{0x06, u8"Î°∏"},
	{0x07, u8"Î°º"},
	{0x08, u8"Î¢ç"},
	{0x09, u8"Î¢®"},
	{0x0A, u8"Î¢∞"},
	{0x0B, u8"Î¢¥"},
	{0x0C, u8"Î¢∏"},
	{0x0D, u8"Î£Ä"},
	{0x0E, u8"Î£Å"},
	{0x0F, u8"Î£É"},
	{0x10, u8"Î£Ö"},
	{0x11, u8"Î£å"},
	{0x12, u8"Î£ê"},
	{0x13, u8"Î£î"},
	{0x14, u8"Î£ù"},
	{0x15, u8"Î£ü"},
	{0x16, u8"Î£°"},
	{0x17, u8"Î£®"},
	{0x18, u8"Î£©"},
	{0x19, u8"Î£¨"},
	{0x1A, u8"Î£∞"},
	{0x1B, u8"Î£∏"},
	{0x1C, u8"Î£π"},
	{0x1D, u8"Î£ª"},
	{0x1E, u8"Î£Ω"},
	{0x1F, u8"Î§Ñ"},
	{0x20, u8"Î§ò"},
	{0x21, u8"Î§†"},
	{0x22, u8"Î§º"},
	{0x23, u8"Î§Ω"},
	{0x24, u8"Î•Ä"},
	{0x25, u8"Î•Ñ"},
	{0x26, u8"Î•å"},
	{0x27, u8"Î•è"},
	{0x28, u8"Î•ë"},
	{0x29, u8"Î•ò"},
	{0x2A, u8"Î•ô"},
	{0x2B, u8"Î•ú"},
	{0x2C, u8"Î•†"},
	{0x2D, u8"Î•®"},
	{0x2E, u8"Î•©"},
	{0x31, u8"Î•´"},
	{0x32, u8"Î•≠"},
	{0x33, u8"Î•¥"},
	{0x34, u8"Î•µ"},
	{0x35, u8"Î•∏"},
	{0x36, u8"Î•º"},
	{0x37, u8"Î¶Ñ"},
	{0x38, u8"Î¶Ö"},
	{0x39, u8"Î¶á"},
	{0x3A, u8"Î¶â"},
	{0x3B, u8"Î¶ä"},
	{0x3C, u8"Î¶ç"},
	{0x3D, u8"Î¶é"},
	{0x3E, u8"Î¶¨"},
	{0x3F, u8"Î¶≠"},
	{0x40, u8"Î¶∞"},
	{0x41, u8"Î¶¥"},
	{0x42, u8"Î¶º"},
	{0x43, u8"Î¶Ω"},
	{0x44, u8"Î¶ø"},
	{0x45, u8"ÎßÅ"},
	{0x46, u8"Îßà"},
	{0x47, u8"Îßâ"},
	{0x48, u8"Îßå"},
	{0x49, u8"Îßé"},
	{0x4A, u8"Îßè"},
	{0x4B, u8"Îßê"},
	{0x4C, u8"Îßë"},
	{0x4D, u8"Îßí"},
	{0x4E, u8"Îßò"},
	{0x4F, u8"Îßô"},
	{0x60, u8"Îßõ"},
	{0x61, u8"Îßù"},
	{0x62, u8"Îßû"},
	{0x63, u8"Îß°"},
	{0x64, u8"Îß£"},
	{0x65, u8"Îß§"},
	{0x66, u8"Îß•"},
	{0x67, u8"Îß®"},
	{0x68, u8"Îß¨"},
	{0x69, u8"Îß¥"},
	{0x6A, u8"Îßµ"},
	{0x6B, u8"Îß∑"},
	{0x6C, u8"Îß∏"},
	{0x6D, u8"Îßπ"},
	{0x6E, u8"Îß∫"},
	{0x6F, u8"Î®Ä"},
	{0x70, u8"Î®Å"},
	{0x71, u8"Î®à"},
	{0x72, u8"Î®ï"},
	{0x73, u8"Î®∏"},
	{0x74, u8"Î®π"},
	{0x75, u8"Î®º"},
	{0x76, u8"Î©Ä"},
	{0x77, u8"Î©Ç"},
	{0x78, u8"Î©à"},
	{0x79, u8"Î©â"},
	{0x7A, u8"Î©ã"},
	{0x7B, u8"Î©ç"},
	{0x7C, u8"Î©é"},
	{0x7D, u8"Î©ì"},
	{0x7E, u8"Î©î"},
	{0x7F, u8"Î©ï"},
	{0x80, u8"Î©ò"},
	{0x81, u8"Î©ú"},
	{0x82, u8"Î©§"},
	{0x83, u8"Î©•"},
	{0x84, u8"Î©ß"},
	{0x85, u8"Î©®"},
	{0x86, u8"Î©©"},
	{0x87, u8"Î©∞"},
	{0x88, u8"Î©±"},
	{0x89, u8"Î©¥"},
	{0x8A, u8"Î©∏"},
	{0x8B, u8"Î™É"},
	{0x8C, u8"Î™Ñ"},
	{0x8D, u8"Î™Ö"},
	{0x8E, u8"Î™á"},
	{0x8F, u8"Î™å"},
	{0x90, u8"Î™®"},
	{0x91, u8"Î™©"},
	{0x92, u8"Î™´"},
	{0x93, u8"Î™¨"},
	{0x94, u8"Î™∞"},
	{0x95, u8"Î™≤"},
	{0x96, u8"Î™∏"},
	{0x97, u8"Î™π"},
	{0x98, u8"Î™ª"},
	{0x99, u8"Î™Ω"},
	{0x9A, u8"Î´Ñ"},
	{0x9B, u8"Î´à"},
	{0x9C, u8"Î´ò"},
	{0x9D, u8"Î´ô"},
	{0x9E, u8"Î´º"},
	{0xA1, u8"Î¨Ä"},
	{0xA2, u8"Î¨Ñ"},
	{0xA3, u8"Î¨ç"},
	{0xA4, u8"Î¨è"},
	{0xA5, u8"Î¨ë"},
	{0xA6, u8"Î¨ò"},
	{0xA7, u8"Î¨ú"},
	{0xA8, u8"Î¨†"},
	{0xA9, u8"Î¨©"},
	{0xAA, u8"Î¨´"},
	{0xAB, u8"Î¨¥"},
	{0xAC, u8"Î¨µ"},
	{0xAD, u8"Î¨∂"},
	{0xAE, u8"Î¨∏"},
	{0xAF, u8"Î¨ª"},
	{0xB0, u8"Î¨º"},
	{0xB1, u8"Î¨Ω"},
	{0xB2, u8"Î¨æ"},
	{0xB3, u8"Î≠Ñ"},
	{0xB4, u8"Î≠Ö"},
	{0xB5, u8"Î≠á"},
	{0xB6, u8"Î≠â"},
	{0xB7, u8"Î≠ç"},
	{0xB8, u8"Î≠è"},
	{0xB9, u8"Î≠ê"},
	{0xBA, u8"Î≠î"},
	{0xBB, u8"Î≠ò"},
	{0xBC, u8"Î≠°"},
	{0xBD, u8"Î≠£"},
	{0xBE, u8"Î≠¨"},
	{0xBF, u8"ÎÆà"},
	{0xC0, u8"ÎÆå"},
	{0xC1, u8"ÎÆê"},
	{0xC2, u8"ÎÆ§"},
	{0xC3, u8"ÎÆ®"},
	{0xC4, u8"ÎÆ¨"},
	{0xC5, u8"ÎÆ¥"},
	{0xC6, u8"ÎÆ∑"},
	{0xC7, u8"ÎØÄ"},
	{0xC8, u8"ÎØÑ"},
	{0xC9, u8"ÎØà"},
	{0xCA, u8"ÎØê"},
	{0xCB, u8"ÎØì"},
	{0xCC, u8"ÎØ∏"},
	{0xCD, u8"ÎØπ"},
	{0xCE, u8"ÎØº"},
	{0xCF, u8"ÎØø"},
	{0xD0, u8"Î∞Ä"},
	{0xD1, u8"Î∞Ç"},
	{0xD2, u8"Î∞à"},
	{0xD3, u8"Î∞â"},
	{0xD4, u8"Î∞ã"},
	{0xD5, u8"Î∞å"},
	{0xD6, u8"Î∞ç"},
	{0xD7, u8"Î∞è"},
	{0xD8, u8"Î∞ë"},
	{0xD9, u8"Î∞î"},
	{0xDA, u8"Î∞ï"},
	{0xDB, u8"Î∞ñ"},
	{0xDC, u8"Î∞ó"},
	{0xDD, u8"Î∞ò"},
	{0xDE, u8"Î∞õ"},
	{0xDF, u8"Î∞ú"},
	{0xE0, u8"Î∞ù"},
	{0xE1, u8"Î∞û"},
	{0xE2, u8"Î∞ü"},
	{0xE3, u8"Î∞§"},
	{0xE4, u8"Î∞•"},
	{0xE5, u8"Î∞ß"},
	{0xE6, u8"Î∞©"},
	{0xE7, u8"Î∞≠"},
	{0xE8, u8"Î∞∞"},
	{0xE9, u8"Î∞±"},
	{0xEA, u8"Î∞¥"},
	{0xEB, u8"Î∞∏"},
	{0xEC, u8"Î±Ä"},
	{0xED, u8"Î±Å"},
	{0xEE, u8"Î±É"},
	{0xEF, u8"Î±Ñ"},
	{0xF0, u8"Î±Ö"},
	{0xF1, u8"Î±â"},
	{0xF2, u8"Î±å"},
	{0xF3, u8"Î±ç"},
	{0xF4, u8"Î±ê"},
	{0xF5, u8"Î±ù"},
	{0xF6, u8"Î≤Ñ"},
	{0xF7, u8"Î≤Ö"},
	{0xF8, u8"Î≤à"},
	{0xF9, u8"Î≤ã"},
	{0xFA, u8"Î≤å"},
	{0xFB, u8"Î≤é"},
	{0xFC, u8"Î≤î"},
	{0xFD, u8"Î≤ï"},
	{0xFE, u8"Î≤ó"}
};

static const TextCodePair gen2TextCodesKorean5[] = {
	{0x01, u8"Î≤ô"},
	{0x02, u8"Î≤ö"},
	{0x03, u8"Î≤†"},
	{0x04, u8"Î≤°"},
	{0x05, u8"Î≤§"},
	{0x06, u8"Î≤ß"},
	{0x07, u8"Î≤®"},
	{0x08, u8"Î≤∞"},
	{0x09, u8"Î≤±"},
	{0x0A, u8"Î≤≥"},
	{0x0B, u8"Î≤¥"},
	{0x0C, u8"Î≤µ"},
	{0x0D, u8"Î≤º"},
	{0x0E, u8"Î≤Ω"},
	{0x0F, u8"Î≥Ä"},
	{0x10, u8"Î≥Ñ"},
	{0x11, u8"Î≥ç"},
	{0x12, u8"Î≥è"},
	{0x13, u8"Î≥ê"},
	{0x14, u8"Î≥ë"},
	{0x15, u8"Î≥ï"},
	{0x16, u8"Î≥ò"},
	{0x17, u8"Î≥ú"},
	{0x18, u8"Î≥¥"},
	{0x19, u8"Î≥µ"},
	{0x1A, u8"Î≥∂"},
	{0x1B, u8"Î≥∏"},
	{0x1C, u8"Î≥º"},
	{0x1D, u8"Î¥Ñ"},
	{0x1E, u8"Î¥Ö"},
	{0x1F, u8"Î¥á"},
	{0x20, u8"Î¥â"},
	{0x21, u8"Î¥ê"},
	{0x22, u8"Î¥î"},
	{0x23, u8"Î¥§"},
	{0x24, u8"Î¥¨"},
	{0x25, u8"ÎµÄ"},
	{0x26, u8"Îµà"},
	{0x27, u8"Îµâ"},
	{0x28, u8"Îµå"},
	{0x29, u8"Îµê"},
	{0x2A, u8"Îµò"},
	{0x2B, u8"Îµô"},
	{0x2C, u8"Îµ§"},
	{0x2D, u8"Îµ®"},
	{0x2E, u8"Î∂Ä"},
	{0x2F, u8"Î∂Å"},
	{0x30, u8"Î∂Ñ"},
	{0x31, u8"Î∂á"},
	{0x32, u8"Î∂à"},
	{0x33, u8"Î∂â"},
	{0x34, u8"Î∂ä"},
	{0x35, u8"Î∂ê"},
	{0x36, u8"Î∂ë"},
	{0x37, u8"Î∂ì"},
	{0x38, u8"Î∂ï"},
	{0x39, u8"Î∂ô"},
	{0x3A, u8"Î∂ö"},
	{0x3B, u8"Î∂ú"},
	{0x3C, u8"Î∂§"},
	{0x3D, u8"Î∂∞"},
	{0x3E, u8"Î∂∏"},
	{0x3F, u8"Î∑î"},
	{0x40, u8"Î∑ï"},
	{0x41, u8"Î∑ò"},
	{0x42, u8"Î∑ú"},
	{0x43, u8"Î∑©"},
	{0x44, u8"Î∑∞"},
	{0x45, u8"Î∑¥"},
	{0x46, u8"Î∑∏"},
	{0x47, u8"Î∏Ä"},
	{0x48, u8"Î∏É"},
	{0x49, u8"Î∏Ö"},
	{0x4A, u8"Î∏å"},
	{0x4B, u8"Î∏ç"},
	{0x4C, u8"Î∏ê"},
	{0x4D, u8"Î∏î"},
	{0x4E, u8"Î∏ú"},
	{0x4F, u8"Î∏ù"},
	{0x60, u8"Î∏ü"},
	{0x61, u8"ÎπÑ"},
	{0x62, u8"ÎπÖ"},
	{0x63, u8"Îπà"},
	{0x64, u8"Îπå"},
	{0x65, u8"Îπé"},
	{0x66, u8"Îπî"},
	{0x67, u8"Îπï"},
	{0x68, u8"Îπó"},
	{0x69, u8"Îπô"},
	{0x6A, u8"Îπö"},
	{0x6B, u8"Îπõ"},
	{0x6C, u8"Îπ†"},
	{0x6D, u8"Îπ°"},
	{0x6E, u8"Îπ§"},
	{0x71, u8"Îπ®"},
	{0x72, u8"Îπ™"},
	{0x73, u8"Îπ∞"},
	{0x74, u8"Îπ±"},
	{0x75, u8"Îπ≥"},
	{0x76, u8"Îπ¥"},
	{0x77, u8"Îπµ"},
	{0x78, u8"Îπª"},
	{0x79, u8"Îπº"},
	{0x7A, u8"ÎπΩ"},
	{0x7B, u8"Î∫Ä"},
	{0x7C, u8"Î∫Ñ"},
	{0x7D, u8"Î∫å"},
	{0x7E, u8"Î∫ç"},
	{0x7F, u8"Î∫è"},
	{0x80, u8"Î∫ê"},
	{0x81, u8"Î∫ë"},
	{0x82, u8"Î∫ò"},
	{0x83, u8"Î∫ô"},
	{0x84, u8"Î∫®"},
	{0x85, u8"Îªê"},
	{0x86, u8"Îªë"},
	{0x87, u8"Îªî"},
	{0x88, u8"Îªó"},
	{0x89, u8"Îªò"},
	{0x8A, u8"Îª†"},
	{0x8B, u8"Îª£"},
	{0x8C, u8"Îª§"},
	{0x8D, u8"Îª•"},
	{0x8E, u8"Îª¨"},
	{0x8F, u8"ÎºÅ"},
	{0x90, u8"Îºà"},
	{0x91, u8"Îºâ"},
	{0x92, u8"Îºò"},
	{0x93, u8"Îºô"},
	{0x94, u8"Îºõ"},
	{0x95, u8"Îºú"},
	{0x96, u8"Îºù"},
	{0x97, u8"ÎΩÄ"},
	{0x98, u8"ÎΩÅ"},
	{0x99, u8"ÎΩÑ"},
	{0x9A, u8"ÎΩà"},
	{0x9B, u8"ÎΩê"},
	{0x9C, u8"ÎΩë"},
	{0x9D, u8"ÎΩï"},
	{0x9E, u8"Îæî"},
	{0x9F, u8"Îæ∞"},
	{0xA0, u8"ÎøÖ"},
	{0xA1, u8"Îøå"},
	{0xA2, u8"Îøç"},
	{0xA3, u8"Îøê"},
	{0xA4, u8"Îøî"},
	{0xA5, u8"Îøú"},
	{0xA6, u8"Îøü"},
	{0xA7, u8"Îø°"},
	{0xA8, u8"ÏÄº"},
	{0xA9, u8"ÏÅë"},
	{0xAA, u8"ÏÅò"},
	{0xAB, u8"ÏÅú"},
	{0xAC, u8"ÏÅ†"},
	{0xAD, u8"ÏÅ®"},
	{0xAE, u8"ÏÅ©"},
	{0xAF, u8"ÏÇê"},
	{0xB0, u8"ÏÇë"},
	{0xB1, u8"ÏÇî"},
	{0xB2, u8"ÏÇò"},
	{0xB3, u8"ÏÇ†"},
	{0xB4, u8"ÏÇ°"},
	{0xB5, u8"ÏÇ£"},
	{0xB6, u8"ÏÇ•"},
	{0xB7, u8"ÏÇ¨"},
	{0xB8, u8"ÏÇ≠"},
	{0xB9, u8"ÏÇØ"},
	{0xBA, u8"ÏÇ∞"},
	{0xBB, u8"ÏÇ≥"},
	{0xBC, u8"ÏÇ¥"},
	{0xBD, u8"ÏÇµ"},
	{0xBE, u8"ÏÇ∂"},
	{0xBF, u8"ÏÇº"},
	{0xC0, u8"ÏÇΩ"},
	{0xC1, u8"ÏÇø"},
	{0xC2, u8"ÏÉÄ"},
	{0xC3, u8"ÏÉÅ"},
	{0xC4, u8"ÏÉÖ"},
	{0xC5, u8"ÏÉà"},
	{0xC6, u8"ÏÉâ"},
	{0xC7, u8"ÏÉå"},
	{0xC8, u8"ÏÉê"},
	{0xC9, u8"ÏÉò"},
	{0xCA, u8"ÏÉô"},
	{0xCB, u8"ÏÉõ"},
	{0xCC, u8"ÏÉú"},
	{0xCD, u8"ÏÉù"},
	{0xCE, u8"ÏÉ§"},
	{0xD1, u8"ÏÉ•"},
	{0xD2, u8"ÏÉ®"},
	{0xD3, u8"ÏÉ¨"},
	{0xD4, u8"ÏÉ¥"},
	{0xD5, u8"ÏÉµ"},
	{0xD6, u8"ÏÉ∑"},
	{0xD7, u8"ÏÉπ"},
	{0xD8, u8"ÏÑÄ"},
	{0xD9, u8"ÏÑÑ"},
	{0xDA, u8"ÏÑà"},
	{0xDB, u8"ÏÑê"},
	{0xDC, u8"ÏÑï"},
	{0xDD, u8"ÏÑú"},
	{0xDE, u8"ÏÑù"},
	{0xDF, u8"ÏÑû"},
	{0xE0, u8"ÏÑü"},
	{0xE1, u8"ÏÑ†"},
	{0xE2, u8"ÏÑ£"},
	{0xE3, u8"ÏÑ§"},
	{0xE4, u8"ÏÑ¶"},
	{0xE5, u8"ÏÑß"},
	{0xE6, u8"ÏÑ¨"},
	{0xE7, u8"ÏÑ≠"},
	{0xE8, u8"ÏÑØ"},
	{0xE9, u8"ÏÑ∞"},
	{0xEA, u8"ÏÑ±"},
	{0xEB, u8"ÏÑ∂"},
	{0xEC, u8"ÏÑ∏"},
	{0xED, u8"ÏÑπ"},
	{0xEE, u8"ÏÑº"},
	{0xEF, u8"ÏÖÄ"},
	{0xF0, u8"ÏÖà"},
	{0xF1, u8"ÏÖâ"},
	{0xF2, u8"ÏÖã"},
	{0xF3, u8"ÏÖå"},
	{0xF4, u8"ÏÖç"},
	{0xF5, u8"ÏÖî"},
	{0xF6, u8"ÏÖï"},
	{0xF7, u8"ÏÖò"},
	{0xF8, u8"ÏÖú"},
	{0xF9, u8"ÏÖ§"},
	{0xFA, u8"ÏÖ•"},
	{0xFB, u8"ÏÖß"},
	{0xFC, u8"ÏÖ®"},
	{0xFD, u8"ÏÖ©"},
	{0xFE, u8"ÏÖ∞"},
	{0xFF, u8"ÏÖ¥"}
};

static const TextCodePair gen2TextCodesKorean6[] = {
	{0x00, u8"ÏÖ∏"},
	{0x01, u8"ÏÜÖ"},
	{0x02, u8"ÏÜå"},
	{0x03, u8"ÏÜç"},
	{0x04, u8"ÏÜé"},
	{0x05, u8"ÏÜê"},
	{0x06, u8"ÏÜî"},
	{0x07, u8"ÏÜñ"},
	{0x08, u8"ÏÜú"},
	{0x09, u8"ÏÜù"},
	{0x0A, u8"ÏÜü"},
	{0x0B, u8"ÏÜ°"},
	{0x0C, u8"ÏÜ•"},
	{0x0D, u8"ÏÜ®"},
	{0x0E, u8"ÏÜ©"},
	{0x0F, u8"ÏÜ¨"},
	{0x10, u8"ÏÜ∞"},
	{0x11, u8"ÏÜΩ"},
	{0x12, u8"ÏáÑ"},
	{0x13, u8"Ïáà"},
	{0x14, u8"Ïáå"},
	{0x15, u8"Ïáî"},
	{0x16, u8"Ïáó"},
	{0x17, u8"Ïáò"},
	{0x18, u8"Ïá†"},
	{0x19, u8"Ïá§"},
	{0x1A, u8"Ïá®"},
	{0x1B, u8"Ïá∞"},
	{0x1C, u8"Ïá±"},
	{0x1D, u8"Ïá≥"},
	{0x1E, u8"Ïáº"},
	{0x1F, u8"ÏáΩ"},
	{0x20, u8"ÏàÄ"},
	{0x21, u8"ÏàÑ"},
	{0x22, u8"Ïàå"},
	{0x23, u8"Ïàç"},
	{0x24, u8"Ïàè"},
	{0x25, u8"Ïàë"},
	{0x26, u8"Ïàò"},
	{0x27, u8"Ïàô"},
	{0x28, u8"Ïàú"},
	{0x29, u8"Ïàü"},
	{0x2A, u8"Ïà†"},
	{0x2B, u8"Ïà®"},
	{0x2C, u8"Ïà©"},
	{0x2D, u8"Ïà´"},
	{0x2E, u8"Ïà≠"},
	{0x2F, u8"Ïå∞"},
	{0x30, u8"Ïéº"},
	{0x31, u8"ÏàØ"},
	{0x32, u8"Ïà±"},
	{0x33, u8"Ïà≤"},
	{0x34, u8"Ïà¥"},
	{0x35, u8"Ïâà"},
	{0x36, u8"Ïâê"},
	{0x37, u8"Ïâë"},
	{0x38, u8"Ïâî"},
	{0x39, u8"Ïâò"},
	{0x3A, u8"Ïâ†"},
	{0x3B, u8"Ïâ•"},
	{0x3C, u8"Ïâ¨"},
	{0x3D, u8"Ïâ≠"},
	{0x3E, u8"Ïâ∞"},
	{0x3F, u8"Ïâ¥"},
	{0x40, u8"Ïâº"},
	{0x41, u8"ÏâΩ"},
	{0x42, u8"Ïâø"},
	{0x43, u8"ÏäÅ"},
	{0x44, u8"Ïäà"},
	{0x45, u8"Ïäâ"},
	{0x46, u8"Ïäê"},
	{0x47, u8"Ïäò"},
	{0x48, u8"Ïäõ"},
	{0x49, u8"Ïäù"},
	{0x4A, u8"Ïä§"},
	{0x4B, u8"Ïä•"},
	{0x4C, u8"Ïä®"},
	{0x4D, u8"Ïä¨"},
	{0x4E, u8"Ïä≠"},
	{0x4F, u8"Ïä¥"},
	{0x60, u8"Ïäµ"},
	{0x61, u8"Ïä∑"},
	{0x62, u8"Ïäπ"},
	{0x63, u8"Ïãú"},
	{0x64, u8"Ïãù"},
	{0x65, u8"Ïã†"},
	{0x66, u8"Ïã£"},
	{0x67, u8"Ïã§"},
	{0x68, u8"Ïã´"},
	{0x69, u8"Ïã¨"},
	{0x6A, u8"Ïã≠"},
	{0x6B, u8"ÏãØ"},
	{0x6C, u8"Ïã±"},
	{0x6D, u8"Ïã∂"},
	{0x6E, u8"Ïã∏"},
	{0x6F, u8"Ïãπ"},
	{0x70, u8"Ïãª"},
	{0x71, u8"Ïãº"},
	{0x72, u8"ÏåÄ"},
	{0x73, u8"Ïåà"},
	{0x74, u8"Ïåâ"},
	{0x75, u8"Ïåå"},
	{0x76, u8"Ïåç"},
	{0x77, u8"Ïåì"},
	{0x78, u8"Ïåî"},
	{0x79, u8"Ïåï"},
	{0x7A, u8"Ïåò"},
	{0x7B, u8"Ïåú"},
	{0x7C, u8"Ïå§"},
	{0x7D, u8"Ïå•"},
	{0x7E, u8"Ïå®"},
	{0x7F, u8"Ïå©"},
	{0x80, u8"ÏçÖ"},
	{0x81, u8"Ïç®"},
	{0x82, u8"Ïç©"},
	{0x83, u8"Ïç¨"},
	{0x84, u8"Ïç∞"},
	{0x85, u8"Ïç≤"},
	{0x86, u8"Ïç∏"},
	{0x87, u8"Ïçπ"},
	{0x88, u8"Ïçº"},
	{0x89, u8"ÏçΩ"},
	{0x8A, u8"ÏéÑ"},
	{0x8B, u8"Ïéà"},
	{0x8C, u8"Ïéå"},
	{0x8D, u8"ÏèÄ"},
	{0x8E, u8"Ïèò"},
	{0x8F, u8"Ïèô"},
	{0x90, u8"Ïèú"},
	{0x91, u8"Ïèü"},
	{0x92, u8"Ïè†"},
	{0x93, u8"Ïè¢"},
	{0x94, u8"Ïè®"},
	{0x95, u8"Ïè©"},
	{0x96, u8"Ïè≠"},
	{0x97, u8"Ïè¥"},
	{0x98, u8"Ïèµ"},
	{0x99, u8"Ïè∏"},
	{0x9A, u8"Ïêà"},
	{0x9B, u8"Ïêê"},
	{0x9C, u8"Ïê§"},
	{0x9D, u8"Ïê¨"},
	{0x9E, u8"Ïê∞"},
	{0xA0, u8"Ïìî"},
	{0xA1, u8"Ïê¥"},
	{0xA2, u8"Ïêº"},
	{0xA3, u8"ÏêΩ"},
	{0xA4, u8"Ïëà"},
	{0xA5, u8"Ïë§"},
	{0xA6, u8"Ïë•"},
	{0xA7, u8"Ïë®"},
	{0xA8, u8"Ïë¨"},
	{0xA9, u8"Ïë¥"},
	{0xAA, u8"Ïëµ"},
	{0xAB, u8"Ïëπ"},
	{0xAC, u8"ÏíÄ"},
	{0xAD, u8"Ïíî"},
	{0xAE, u8"Ïíú"},
	{0xAF, u8"Ïí∏"},
	{0xB0, u8"Ïíº"},
	{0xB1, u8"Ïì©"},
	{0xB2, u8"Ïì∞"},
	{0xB3, u8"Ïì±"},
	{0xB4, u8"Ïì¥"},
	{0xB5, u8"Ïì∏"},
	{0xB6, u8"Ïì∫"},
	{0xB7, u8"Ïìø"},
	{0xB8, u8"ÏîÄ"},
	{0xB9, u8"ÏîÅ"},
	{0xBA, u8"Ïîå"},
	{0xBB, u8"Ïîê"},
	{0xBC, u8"Ïîî"},
	{0xBD, u8"Ïîú"},
	{0xBE, u8"Ïî®"},
	{0xBF, u8"Ïî©"},
	{0xC0, u8"Ïî¨"},
	{0xC1, u8"Ïî∞"},
	{0xC2, u8"Ïî∏"},
	{0xC3, u8"Ïîπ"},
	{0xC4, u8"Ïîª"},
	{0xC5, u8"ÏîΩ"},
	{0xC6, u8"ÏïÑ"},
	{0xC7, u8"ÏïÖ"},
	{0xC8, u8"Ïïà"},
	{0xC9, u8"Ïïâ"},
	{0xCA, u8"Ïïä"},
	{0xCB, u8"Ïïå"},
	{0xCC, u8"Ïïç"},
	{0xCD, u8"Ïïé"},
	{0xCE, u8"Ïïì"},
	{0xCF, u8"Ïïî"},
	{0xD0, u8"Ïïï"},
	{0xD1, u8"Ïïó"},
	{0xD2, u8"Ïïò"},
	{0xD3, u8"Ïïô"},
	{0xD4, u8"Ïïù"},
	{0xD5, u8"Ïïû"},
	{0xD6, u8"Ïï†"},
	{0xD7, u8"Ïï°"},
	{0xD8, u8"Ïï§"},
	{0xD9, u8"Ïï®"},
	{0xDA, u8"Ïï∞"},
	{0xDB, u8"Ïï±"},
	{0xDC, u8"Ïï≥"},
	{0xDD, u8"Ïï¥"},
	{0xDE, u8"Ïïµ"},
	{0xDF, u8"Ïïº"},
	{0xE0, u8"ÏïΩ"},
	{0xE1, u8"ÏñÄ"},
	{0xE2, u8"ÏñÑ"},
	{0xE3, u8"Ïñá"},
	{0xE4, u8"Ïñå"},
	{0xE5, u8"Ïñç"},
	{0xE6, u8"Ïñè"},
	{0xE7, u8"Ïñë"},
	{0xE8, u8"Ïñï"},
	{0xE9, u8"Ïñó"},
	{0xEA, u8"Ïñò"},
	{0xEB, u8"Ïñú"},
	{0xEC, u8"Ïñ†"},
	{0xED, u8"Ïñ©"},
	{0xEE, u8"Ïñ¥"},
	{0xEF, u8"Ïñµ"},
	{0xF0, u8"Ïñ∏"},
	{0xF1, u8"Ïñπ"},
	{0xF2, u8"Ïñª"},
	{0xF3, u8"Ïñº"},
	{0xF4, u8"ÏñΩ"},
	{0xF5, u8"Ïñæ"},
	{0xF6, u8"ÏóÑ"},
	{0xF7, u8"ÏóÖ"},
	{0xF8, u8"ÏóÜ"},
	{0xF9, u8"Ïóá"},
	{0xFA, u8"Ïóà"},
	{0xFB, u8"Ïóâ"},
	{0xFC, u8"Ïóä"},
	{0xFD, u8"Ïóå"},
	{0xFE, u8"Ïóé"}
};

static const TextCodePair gen2TextCodesKorean7[] = {
	{0x01, u8"Ïóê"},
	{0x02, u8"Ïóë"},
	{0x03, u8"Ïóî"},
	{0x04, u8"Ïóò"},
	{0x05, u8"Ïó†"},
	{0x06, u8"Ïó°"},
	{0x07, u8"Ïó£"},
	{0x08, u8"Ïó•"},
	{0x09, u8"Ïó¨"},
	{0x0A, u8"Ïó≠"},
	{0x0B, u8"ÏóÆ"},
	{0x0C, u8"Ïó∞"},
	{0x0D, u8"Ïó¥"},
	{0x0E, u8"Ïó∂"},
	{0x0F, u8"Ïó∑"},
	{0x10, u8"Ïóº"},
	{0x11, u8"ÏóΩ"},
	{0x12, u8"Ïóæ"},
	{0x13, u8"Ïóø"},
	{0x14, u8"ÏòÄ"},
	{0x15, u8"ÏòÅ"},
	{0x16, u8"ÏòÖ"},
	{0x17, u8"ÏòÜ"},
	{0x18, u8"Ïòá"},
	{0x19, u8"Ïòà"},
	{0x1A, u8"Ïòå"},
	{0x1B, u8"Ïòê"},
	{0x1C, u8"Ïòò"},
	{0x1D, u8"Ïòô"},
	{0x1E, u8"Ïòõ"},
	{0x1F, u8"Ïòú"},
	{0x20, u8"Ïò§"},
	{0x21, u8"Ïò•"},
	{0x22, u8"Ïò®"},
	{0x23, u8"Ïò¨"},
	{0x24, u8"Ïò≠"},
	{0x25, u8"ÏòÆ"},
	{0x26, u8"Ïò∞"},
	{0x27, u8"Ïò≥"},
	{0x28, u8"Ïò¥"},
	{0x29, u8"Ïòµ"},
	{0x2A, u8"Ïò∑"},
	{0x2B, u8"Ïòπ"},
	{0x2C, u8"Ïòª"},
	{0x2D, u8"ÏôÄ"},
	{0x2E, u8"ÏôÅ"},
	{0x2F, u8"ÏôÑ"},
	{0x30, u8"Ïôà"},
	{0x31, u8"Ïôê"},
	{0x32, u8"Ïôë"},
	{0x33, u8"Ïôì"},
	{0x34, u8"Ïôî"},
	{0x35, u8"Ïôï"},
	{0x36, u8"Ïôú"},
	{0x37, u8"Ïôù"},
	{0x38, u8"Ïô†"},
	{0x39, u8"Ïô¨"},
	{0x3A, u8"ÏôØ"},
	{0x3B, u8"Ïô±"},
	{0x3C, u8"Ïô∏"},
	{0x3D, u8"Ïôπ"},
	{0x3E, u8"Ïôº"},
	{0x3F, u8"ÏöÄ"},
	{0x40, u8"Ïöà"},
	{0x41, u8"Ïöâ"},
	{0x42, u8"Ïöã"},
	{0x43, u8"Ïöç"},
	{0x44, u8"Ïöî"},
	{0x45, u8"Ïöï"},
	{0x46, u8"Ïöò"},
	{0x47, u8"Ïöú"},
	{0x48, u8"Ïö§"},
	{0x49, u8"Ïö•"},
	{0x4A, u8"Ïöß"},
	{0x4B, u8"Ïö©"},
	{0x4C, u8"Ïö∞"},
	{0x4D, u8"Ïö±"},
	{0x4E, u8"Ïö¥"},
	{0x4F, u8"Ïö∏"},
	{0x60, u8"Ïöπ"},
	{0x61, u8"Ïö∫"},
	{0x62, u8"ÏõÄ"},
	{0x63, u8"ÏõÅ"},
	{0x64, u8"ÏõÉ"},
	{0x65, u8"ÏõÖ"},
	{0x66, u8"Ïõå"},
	{0x67, u8"Ïõç"},
	{0x68, u8"Ïõê"},
	{0x69, u8"Ïõî"},
	{0x6A, u8"Ïõú"},
	{0x6B, u8"Ïõù"},
	{0x6C, u8"Ïõ†"},
	{0x6D, u8"Ïõ°"},
	{0x6E, u8"Ïõ®"},
	{0x71, u8"Ïõ©"},
	{0x72, u8"Ïõ¨"},
	{0x73, u8"Ïõ∞"},
	{0x74, u8"Ïõ∏"},
	{0x75, u8"Ïõπ"},
	{0x76, u8"ÏõΩ"},
	{0x77, u8"ÏúÑ"},
	{0x78, u8"ÏúÖ"},
	{0x79, u8"Ïúà"},
	{0x7A, u8"Ïúå"},
	{0x7B, u8"Ïúî"},
	{0x7C, u8"Ïúï"},
	{0x7D, u8"Ïúó"},
	{0x7E, u8"Ïúô"},
	{0x7F, u8"Ïú†"},
	{0x80, u8"Ïú°"},
	{0x81, u8"Ïú§"},
	{0x82, u8"Ïú®"},
	{0x83, u8"Ïú∞"},
	{0x84, u8"Ïú±"},
	{0x85, u8"Ïú≥"},
	{0x86, u8"Ïúµ"},
	{0x87, u8"Ïú∑"},
	{0x88, u8"Ïúº"},
	{0x89, u8"ÏúΩ"},
	{0x8A, u8"ÏùÄ"},
	{0x8B, u8"ÏùÑ"},
	{0x8C, u8"ÏùÜ"},
	{0x8D, u8"Ïùå"},
	{0x8E, u8"Ïùç"},
	{0x8F, u8"Ïùè"},
	{0x90, u8"Ïùë"},
	{0x91, u8"Ïùí"},
	{0x92, u8"Ïùì"},
	{0x93, u8"Ïùî"},
	{0x94, u8"Ïùï"},
	{0x95, u8"Ïùñ"},
	{0x96, u8"Ïùó"},
	{0x97, u8"Ïùò"},
	{0x98, u8"Ïùú"},
	{0x99, u8"Ïù†"},
	{0x9A, u8"Ïù®"},
	{0x9B, u8"Ïù´"},
	{0x9C, u8"Ïù¥"},
	{0x9D, u8"Ïùµ"},
	{0x9E, u8"Ïù∏"},
	{0x9F, u8"Ïùº"},
	{0xA0, u8"ÏùΩ"},
	{0xA1, u8"Ïùæ"},
	{0xA2, u8"ÏûÉ"},
	{0xA3, u8"ÏûÑ"},
	{0xA4, u8"ÏûÖ"},
	{0xA5, u8"Ïûá"},
	{0xA6, u8"Ïûà"},
	{0xA7, u8"Ïûâ"},
	{0xA8, u8"Ïûä"},
	{0xA9, u8"Ïûé"},
	{0xAA, u8"Ïûê"},
	{0xAB, u8"Ïûë"},
	{0xAC, u8"Ïûî"},
	{0xAD, u8"Ïûñ"},
	{0xAE, u8"Ïûó"},
	{0xAF, u8"Ïûò"},
	{0xB0, u8"Ïûö"},
	{0xB1, u8"Ïû†"},
	{0xB2, u8"Ïû°"},
	{0xB3, u8"Ïû£"},
	{0xB4, u8"Ïû§"},
	{0xB5, u8"Ïû•"},
	{0xB6, u8"Ïû¶"},
	{0xB7, u8"Ïû¨"},
	{0xB8, u8"Ïû≠"},
	{0xB9, u8"Ïû∞"},
	{0xBA, u8"Ïû¥"},
	{0xBB, u8"Ïûº"},
	{0xBC, u8"ÏûΩ"},
	{0xBD, u8"Ïûø"},
	{0xBE, u8"ÏüÄ"},
	{0xBF, u8"ÏüÅ"},
	{0xC0, u8"Ïüà"},
	{0xC1, u8"Ïüâ"},
	{0xC2, u8"Ïüå"},
	{0xC3, u8"Ïüé"},
	{0xC4, u8"Ïüê"},
	{0xC5, u8"Ïüò"},
	{0xC6, u8"Ïüù"},
	{0xC7, u8"Ïü§"},
	{0xC8, u8"Ïü®"},
	{0xC9, u8"Ïü¨"},
	{0xCA, u8"Ï†Ä"},
	{0xCB, u8"Ï†Å"},
	{0xCC, u8"Ï†Ñ"},
	{0xCD, u8"Ï†à"},
	{0xCE, u8"Ï†ä"},
	{0xD1, u8"Ï†ê"},
	{0xD2, u8"Ï†ë"},
	{0xD3, u8"Ï†ì"},
	{0xD4, u8"Ï†ï"},
	{0xD5, u8"Ï†ñ"},
	{0xD6, u8"Ï†ú"},
	{0xD7, u8"Ï†ù"},
	{0xD8, u8"Ï††"},
	{0xD9, u8"Ï†§"},
	{0xDA, u8"Ï†¨"},
	{0xDB, u8"Ï†≠"},
	{0xDC, u8"Ï†Ø"},
	{0xDD, u8"Ï†±"},
	{0xDE, u8"Ï†∏"},
	{0xDF, u8"Ï†º"},
	{0xE0, u8"Ï°Ä"},
	{0xE1, u8"Ï°à"},
	{0xE2, u8"Ï°â"},
	{0xE3, u8"Ï°å"},
	{0xE4, u8"Ï°ç"},
	{0xE5, u8"Ï°î"},
	{0xE6, u8"Ï°∞"},
	{0xE7, u8"Ï°±"},
	{0xE8, u8"Ï°¥"},
	{0xE9, u8"Ï°∏"},
	{0xEA, u8"Ï°∫"},
	{0xEB, u8"Ï¢Ä"},
	{0xEC, u8"Ï¢Å"},
	{0xED, u8"Ï¢É"},
	{0xEE, u8"Ï¢Ö"},
	{0xEF, u8"Ï¢Ü"},
	{0xF0, u8"Ï¢á"},
	{0xF1, u8"Ï¢ã"},
	{0xF2, u8"Ï¢å"},
	{0xF3, u8"Ï¢ç"},
	{0xF4, u8"Ï¢î"},
	{0xF5, u8"Ï¢ù"},
	{0xF6, u8"Ï¢ü"},
	{0xF7, u8"Ï¢°"},
	{0xF8, u8"Ï¢®"},
	{0xF9, u8"Ï¢º"},
	{0xFA, u8"Ï¢Ω"},
	{0xFB, u8"Ï£Ñ"},
	{0xFC, u8"Ï£à"},
	{0xFD, u8"Ï£å"},
	{0xFE, u8"Ï£î"},
	{0xFF, u8"Ï£ï"}
};

static const TextCodePair gen2TextCodesKorean8[] = {
	{0x00, u8"Ï£ó"},
	{0x01, u8"Ï£ô"},
	{0x02, u8"Ï£†"},
	{0x03, u8"Ï£°"},
	{0x04, u8"Ï£§"},
	{0x05, u8"Ï£µ"},
	{0x06, u8"Ï£º"},
	{0x07, u8"Ï£Ω"},
	{0x08, u8"Ï§Ä"},
	{0x09, u8"Ï§Ñ"},
	{0x0A, u8"Ï§Ö"},
	{0x0B, u8"Ï§Ü"},
	{0x0C, u8"Ï§å"},
	{0x0D, u8"Ï§ç"},
	{0x0E, u8"Ï§è"},
	{0x0F, u8"Ï§ë"},
	{0x10, u8"Ï§ò"},
	{0x11, u8"Ï§¨"},
	{0x12, u8"Ï§¥"},
	{0x13, u8"Ï•ê"},
	{0x14, u8"Ï•ë"},
	{0x15, u8"Ï•î"},
	{0x16, u8"Ï•ò"},
	{0x17, u8"Ï•†"},
	{0x18, u8"Ï•°"},
	{0x19, u8"Ï•£"},
	{0x1A, u8"Ï•¨"},
	{0x1B, u8"Ï•∞"},
	{0x1C, u8"Ï•¥"},
	{0x1D, u8"Ï•º"},
	{0x1E, u8"Ï¶à"},
	{0x1F, u8"Ï¶â"},
	{0x20, u8"Ï¶å"},
	{0x21, u8"Ï¶ê"},
	{0x22, u8"Ï¶ò"},
	{0x23, u8"Ï¶ô"},
	{0x24, u8"Ï¶õ"},
	{0x25, u8"Ï¶ù"},
	{0x26, u8"ÏßÄ"},
	{0x27, u8"ÏßÅ"},
	{0x28, u8"ÏßÑ"},
	{0x29, u8"Ïßá"},
	{0x2A, u8"Ïßà"},
	{0x2B, u8"Ïßä"},
	{0x2C, u8"Ïßê"},
	{0x2D, u8"Ïßë"},
	{0x2E, u8"Ïßì"},
	{0x30, u8"Ï¨¨"},
	{0x31, u8"Ïßï"},
	{0x32, u8"Ïßñ"},
	{0x33, u8"Ïßô"},
	{0x34, u8"Ïßö"},
	{0x35, u8"Ïßú"},
	{0x36, u8"Ïßù"},
	{0x37, u8"Ïß†"},
	{0x38, u8"Ïß¢"},
	{0x39, u8"Ïß§"},
	{0x3A, u8"Ïßß"},
	{0x3B, u8"Ïß¨"},
	{0x3C, u8"Ïß≠"},
	{0x3D, u8"ÏßØ"},
	{0x3E, u8"Ïß∞"},
	{0x3F, u8"Ïß±"},
	{0x40, u8"Ïß∏"},
	{0x41, u8"Ïßπ"},
	{0x42, u8"Ïßº"},
	{0x43, u8"Ï®Ä"},
	{0x44, u8"Ï®à"},
	{0x45, u8"Ï®â"},
	{0x46, u8"Ï®ã"},
	{0x47, u8"Ï®å"},
	{0x48, u8"Ï®ç"},
	{0x49, u8"Ï®î"},
	{0x4A, u8"Ï®ò"},
	{0x4B, u8"Ï®©"},
	{0x4C, u8"Ï©å"},
	{0x4D, u8"Ï©ç"},
	{0x4E, u8"Ï©ê"},
	{0x4F, u8"Ï©î"},
	{0x60, u8"Ï©ú"},
	{0x61, u8"Ï©ù"},
	{0x62, u8"Ï©ü"},
	{0x63, u8"Ï©†"},
	{0x64, u8"Ï©°"},
	{0x65, u8"Ï©®"},
	{0x66, u8"Ï©Ω"},
	{0x67, u8"Ï™Ñ"},
	{0x68, u8"Ï™ò"},
	{0x69, u8"Ï™º"},
	{0x6A, u8"Ï™Ω"},
	{0x6B, u8"Ï´Ä"},
	{0x6C, u8"Ï´Ñ"},
	{0x6D, u8"Ï´å"},
	{0x6E, u8"Ï´ç"},
	{0x6F, u8"Ï´è"},
	{0x70, u8"Ï´ë"},
	{0x71, u8"Ï´ì"},
	{0x72, u8"Ï´ò"},
	{0x73, u8"Ï´ô"},
	{0x74, u8"Ï´†"},
	{0x75, u8"Ï´¨"},
	{0x76, u8"Ï´¥"},
	{0x77, u8"Ï´¥"},
	{0x78, u8"Ï¨ê"},
	{0x79, u8"Ï¨î"},
	{0x7A, u8"Ï¨ò"},
	{0x7B, u8"Ï¨†"},
	{0x7C, u8"Ï¨°"},
	{0x7D, u8"Ï≠Å"},
	{0x7E, u8"Ï≠à"},
	{0x7F, u8"Ï≠â"},
	{0x80, u8"Ï≠å"},
	{0x81, u8"Ï≠ê"},
	{0x82, u8"Ï≠ò"},
	{0x83, u8"Ï≠ô"},
	{0x84, u8"Ï≠ù"},
	{0x85, u8"Ï≠§"},
	{0x86, u8"Ï≠∏"},
	{0x87, u8"Ï≠π"},
	{0x88, u8"ÏÆú"},
	{0x89, u8"ÏÆ∏"},
	{0x8A, u8"ÏØî"},
	{0x8B, u8"ÏØ§"},
	{0x8C, u8"ÏØß"},
	{0x8D, u8"ÏØ©"},
	{0x8E, u8"Ï∞å"},
	{0x8F, u8"Ï∞ç"},
	{0x90, u8"Ï∞ê"},
	{0x91, u8"Ï∞î"},
	{0x92, u8"Ï∞ú"},
	{0x93, u8"Ï∞ù"},
	{0x94, u8"Ï∞°"},
	{0x95, u8"Ï∞¢"},
	{0x96, u8"Ï∞ß"},
	{0x97, u8"Ï∞®"},
	{0x98, u8"Ï∞©"},
	{0x99, u8"Ï∞¨"},
	{0x9A, u8"Ï∞Æ"},
	{0x9B, u8"Ï∞∞"},
	{0x9C, u8"Ï∞∏"},
	{0x9D, u8"Ï∞π"},
	{0x9E, u8"Ï∞ª"},
	{0xA1, u8"Ï∞º"},
	{0xA2, u8"Ï∞Ω"},
	{0xA3, u8"Ï∞æ"},
	{0xA4, u8"Ï±Ñ"},
	{0xA5, u8"Ï±Ö"},
	{0xA6, u8"Ï±à"},
	{0xA7, u8"Ï±å"},
	{0xA8, u8"Ï±î"},
	{0xA9, u8"Ï±ï"},
	{0xAA, u8"Ï±ó"},
	{0xAB, u8"Ï±ò"},
	{0xAC, u8"Ï±ô"},
	{0xAD, u8"Ï±†"},
	{0xAE, u8"Ï±§"},
	{0xAF, u8"Ï±¶"},
	{0xB0, u8"Ï±®"},
	{0xB1, u8"Ï±∞"},
	{0xB2, u8"Ï±µ"},
	{0xB3, u8"Ï≤ò"},
	{0xB4, u8"Ï≤ô"},
	{0xB5, u8"Ï≤ú"},
	{0xB6, u8"Ï≤†"},
	{0xB7, u8"Ï≤®"},
	{0xB8, u8"Ï≤©"},
	{0xB9, u8"Ï≤´"},
	{0xBA, u8"Ï≤¨"},
	{0xBB, u8"Ï≤≠"},
	{0xBC, u8"Ï≤¥"},
	{0xBD, u8"Ï≤µ"},
	{0xBE, u8"Ï≤∏"},
	{0xBF, u8"Ï≤º"},
	{0xC0, u8"Ï≥Ñ"},
	{0xC1, u8"Ï≥Ö"},
	{0xC2, u8"Ï≥á"},
	{0xC3, u8"Ï≥â"},
	{0xC4, u8"Ï≥ê"},
	{0xC5, u8"Ï≥î"},
	{0xC6, u8"Ï≥§"},
	{0xC7, u8"Ï≥¨"},
	{0xC8, u8"Ï≥∞"},
	{0xC9, u8"Ï¥Å"},
	{0xCA, u8"Ï¥à"},
	{0xCB, u8"Ï¥â"},
	{0xCC, u8"Ï¥å"},
	{0xCD, u8"Ï¥ê"},
	{0xCE, u8"Ï¥ò"},
	{0xCF, u8"Ï¥ô"},
	{0xD0, u8"Ï¥õ"},
	{0xD1, u8"Ï¥ù"},
	{0xD2, u8"Ï¥§"},
	{0xD3, u8"Ï¥®"},
	{0xD4, u8"Ï¥¨"},
	{0xD5, u8"Ï¥π"},
	{0xD6, u8"Ïµú"},
	{0xD7, u8"Ïµ†"},
	{0xD8, u8"Ïµ§"},
	{0xD9, u8"Ïµ¨"},
	{0xDA, u8"Ïµ≠"},
	{0xDB, u8"ÏµØ"},
	{0xDC, u8"Ïµ±"},
	{0xDD, u8"Ïµ∏"},
	{0xDE, u8"Ï∂à"},
	{0xDF, u8"Ï∂î"},
	{0xE0, u8"Ï∂ï"},
	{0xE1, u8"Ï∂ò"},
	{0xE2, u8"Ï∂ú"},
	{0xE3, u8"Ï∂§"},
	{0xE4, u8"Ï∂•"},
	{0xE5, u8"Ï∂ß"},
	{0xE6, u8"Ï∂©"},
	{0xE7, u8"Ï∂∞"},
	{0xE8, u8"Ï∑Ñ"},
	{0xE9, u8"Ï∑å"},
	{0xEA, u8"Ï∑ê"},
	{0xEB, u8"Ï∑®"},
	{0xEC, u8"Ï∑¨"},
	{0xED, u8"Ï∑∞"},
	{0xEE, u8"Ï∑∏"},
	{0xEF, u8"Ï∑π"},
	{0xF0, u8"Ï∑ª"},
	{0xF1, u8"Ï∑Ω"},
	{0xF2, u8"Ï∏Ñ"},
	{0xF3, u8"Ï∏à"},
	{0xF4, u8"Ï∏å"},
	{0xF5, u8"Ï∏î"},
	{0xF6, u8"Ï∏ô"},
	{0xF7, u8"Ï∏†"},
	{0xF8, u8"Ï∏°"},
	{0xF9, u8"Ï∏§"},
	{0xFA, u8"Ï∏®"},
	{0xFB, u8"Ï∏∞"},
	{0xFC, u8"Ï∏±"},
	{0xFD, u8"Ï∏≥"},
	{0xFE, u8"Ï∏µ"}
};

static const TextCodePair gen2TextCodesKorean9[] = {
	{0x01, u8"Ïπò"},
	{0x02, u8"Ïπô"},
	{0x03, u8"Ïπú"},
	{0x04, u8"Ïπü"},
	{0x05, u8"Ïπ†"},
	{0x06, u8"Ïπ°"},
	{0x07, u8"Ïπ®"},
	{0x08, u8"Ïπ©"},
	{0x09, u8"Ïπ´"},
	{0x0A, u8"Ïπ≠"},
	{0x0B, u8"Ïπ¥"},
	{0x0C, u8"Ïπµ"},
	{0x0D, u8"Ïπ∏"},
	{0x0E, u8"Ïπº"},
	{0x0F, u8"Ï∫Ñ"},
	{0x10, u8"Ï∫Ö"},
	{0x11, u8"Ï∫á"},
	{0x12, u8"Ï∫â"},
	{0x13, u8"Ï∫ê"},
	{0x14, u8"Ï∫ë"},
	{0x15, u8"Ï∫î"},
	{0x16, u8"Ï∫ò"},
	{0x17, u8"Ï∫†"},
	{0x18, u8"Ï∫°"},
	{0x19, u8"Ï∫£"},
	{0x1A, u8"Ï∫§"},
	{0x1B, u8"Ï∫•"},
	{0x1C, u8"Ï∫¨"},
	{0x1D, u8"Ï∫≠"},
	{0x1E, u8"ÏªÅ"},
	{0x1F, u8"Ïª§"},
	{0x20, u8"Ïª•"},
	{0x21, u8"Ïª®"},
	{0x22, u8"Ïª´"},
	{0x23, u8"Ïª¨"},
	{0x24, u8"Ïª¥"},
	{0x25, u8"Ïªµ"},
	{0x26, u8"Ïª∑"},
	{0x27, u8"Ïª∏"},
	{0x28, u8"Ïªπ"},
	{0x29, u8"ÏºÄ"},
	{0x2A, u8"ÏºÅ"},
	{0x2B, u8"ÏºÑ"},
	{0x2C, u8"Ïºà"},
	{0x2D, u8"Ïºê"},
	{0x2E, u8"Ïºë"},
	{0x2F, u8"Ïºì"},
	{0x30, u8"Ïºï"},
	{0x31, u8"Ïºú"},
	{0x32, u8"Ïº†"},
	{0x33, u8"Ïº§"},
	{0x34, u8"Ïº¨"},
	{0x35, u8"Ïº≠"},
	{0x36, u8"ÏºØ"},
	{0x37, u8"Ïº∞"},
	{0x38, u8"Ïº±"},
	{0x39, u8"Ïº∏"},
	{0x3A, u8"ÏΩî"},
	{0x3B, u8"ÏΩï"},
	{0x3C, u8"ÏΩò"},
	{0x3D, u8"ÏΩú"},
	{0x3E, u8"ÏΩ§"},
	{0x3F, u8"ÏΩ•"},
	{0x40, u8"ÏΩß"},
	{0x41, u8"ÏΩ©"},
	{0x42, u8"ÏΩ∞"},
	{0x43, u8"ÏΩ±"},
	{0x44, u8"ÏΩ¥"},
	{0x45, u8"ÏΩ∏"},
	{0x46, u8"ÏæÄ"},
	{0x47, u8"ÏæÖ"},
	{0x48, u8"Ïæå"},
	{0x49, u8"Ïæ°"},
	{0x4A, u8"Ïæ®"},
	{0x4B, u8"Ïæ∞"},
	{0x4C, u8"ÏøÑ"},
	{0x4D, u8"Ïø†"},
	{0x4E, u8"Ïø°"},
	{0x4F, u8"Ïø§"},
	{0x60, u8"Ïø®"},
	{0x61, u8"Ïø∞"},
	{0x62, u8"Ïø±"},
	{0x63, u8"Ïø≥"},
	{0x64, u8"Ïøµ"},
	{0x65, u8"Ïøº"},
	{0x66, u8"ÌÄÄ"},
	{0x67, u8"ÌÄÑ"},
	{0x68, u8"ÌÄë"},
	{0x69, u8"ÌÄò"},
	{0x6A, u8"ÌÄ≠"},
	{0x6B, u8"ÌÄ¥"},
	{0x6C, u8"ÌÄµ"},
	{0x6D, u8"ÌÄ∏"},
	{0x6E, u8"ÌÄº"},
	{0x71, u8"ÌÅÑ"},
	{0x72, u8"ÌÅÖ"},
	{0x73, u8"ÌÅá"},
	{0x74, u8"ÌÅâ"},
	{0x75, u8"ÌÅê"},
	{0x76, u8"ÌÅî"},
	{0x77, u8"ÌÅò"},
	{0x78, u8"ÌÅ†"},
	{0x79, u8"ÌÅ¨"},
	{0x7A, u8"ÌÅ≠"},
	{0x7B, u8"ÌÅ∞"},
	{0x7C, u8"ÌÅ¥"},
	{0x7D, u8"ÌÅº"},
	{0x7E, u8"ÌÅΩ"},
	{0x7F, u8"ÌÇÅ"},
	{0x80, u8"ÌÇ§"},
	{0x81, u8"ÌÇ•"},
	{0x82, u8"ÌÇ®"},
	{0x83, u8"ÌÇ¨"},
	{0x84, u8"ÌÇ¥"},
	{0x85, u8"ÌÇµ"},
	{0x86, u8"ÌÇ∑"},
	{0x87, u8"ÌÇπ"},
	{0x88, u8"ÌÉÄ"},
	{0x89, u8"ÌÉÅ"},
	{0x8A, u8"ÌÉÑ"},
	{0x8B, u8"ÌÉà"},
	{0x8C, u8"ÌÉâ"},
	{0x8D, u8"ÌÉê"},
	{0x8E, u8"ÌÉë"},
	{0x8F, u8"ÌÉì"},
	{0x90, u8"ÌÉî"},
	{0x91, u8"ÌÉï"},
	{0x92, u8"ÌÉú"},
	{0x93, u8"ÌÉù"},
	{0x94, u8"ÌÉ†"},
	{0x95, u8"ÌÉ§"},
	{0x96, u8"ÌÉ¨"},
	{0x97, u8"ÌÉ≠"},
	{0x98, u8"ÌÉØ"},
	{0x99, u8"ÌÉ∞"},
	{0x9A, u8"ÌÉ±"},
	{0x9B, u8"ÌÉ∏"},
	{0x9C, u8"ÌÑç"},
	{0x9D, u8"ÌÑ∞"},
	{0x9E, u8"ÌÑ±"},
	{0x9F, u8"ÌÑ¥"},
	{0xA0, u8"ÌÑ∏"},
	{0xA1, u8"ÌÑ∫"},
	{0xA2, u8"ÌÖÄ"},
	{0xA3, u8"ÌÖÅ"},
	{0xA4, u8"ÌÖÉ"},
	{0xA5, u8"ÌÖÑ"},
	{0xA6, u8"ÌÖÖ"},
	{0xA7, u8"ÌÖå"},
	{0xA8, u8"ÌÖç"},
	{0xA9, u8"ÌÖê"},
	{0xAA, u8"ÌÖî"},
	{0xAB, u8"ÌÖú"},
	{0xAC, u8"ÌÖù"},
	{0xAD, u8"ÌÖü"},
	{0xAE, u8"ÌÖ°"},
	{0xAF, u8"ÌÖ®"},
	{0xB0, u8"ÌÖ¨"},
	{0xB1, u8"ÌÖº"},
	{0xB2, u8"ÌÜÑ"},
	{0xB3, u8"ÌÜà"},
	{0xB4, u8"ÌÜ†"},
	{0xB5, u8"ÌÜ°"},
	{0xB6, u8"ÌÜ§"},
	{0xB7, u8"ÌÜ®"},
	{0xB8, u8"ÌÜ∞"},
	{0xB9, u8"ÌÜ±"},
	{0xBA, u8"ÌÜ≥"},
	{0xBB, u8"ÌÜµ"},
	{0xBC, u8"ÌÜ∫"},
	{0xBD, u8"ÌÜº"},
	{0xBE, u8"ÌáÄ"},
	{0xBF, u8"Ìáò"},
	{0xC0, u8"Ìá¥"},
	{0xC1, u8"Ìá∏"},
	{0xC2, u8"Ìàá"},
	{0xC3, u8"Ìàâ"},
	{0xC4, u8"Ìàê"},
	{0xC5, u8"Ìà¨"},
	{0xC6, u8"Ìà≠"},
	{0xC7, u8"Ìà∞"},
	{0xC8, u8"Ìà¥"},
	{0xC9, u8"Ìàº"},
	{0xCA, u8"ÌàΩ"},
	{0xCB, u8"Ìàø"},
	{0xCC, u8"ÌâÅ"},
	{0xCD, u8"Ìâà"},
	{0xCE, u8"Ìâú"},
	{0xD1, u8"Ìâ§"},
	{0xD2, u8"ÌäÄ"},
	{0xD3, u8"ÌäÅ"},
	{0xD4, u8"ÌäÑ"},
	{0xD5, u8"Ìäà"},
	{0xD6, u8"Ìäê"},
	{0xD7, u8"Ìäë"},
	{0xD8, u8"Ìäï"},
	{0xD9, u8"Ìäú"},
	{0xDA, u8"Ìä†"},
	{0xDB, u8"Ìä§"},
	{0xDC, u8"Ìä¨"},
	{0xDD, u8"Ìä±"},
	{0xDE, u8"Ìä∏"},
	{0xDF, u8"Ìäπ"},
	{0xE0, u8"Ìäº"},
	{0xE1, u8"Ìäø"},
	{0xE2, u8"ÌãÄ"},
	{0xE3, u8"ÌãÇ"},
	{0xE4, u8"Ìãà"},
	{0xE5, u8"Ìãâ"},
	{0xE6, u8"Ìãã"},
	{0xE7, u8"Ìãî"},
	{0xE8, u8"Ìãò"},
	{0xE9, u8"Ìãú"},
	{0xEA, u8"Ìã§"},
	{0xEB, u8"Ìã•"},
	{0xEC, u8"Ìã∞"},
	{0xED, u8"Ìã±"},
	{0xEE, u8"Ìã¥"},
	{0xEF, u8"Ìã∏"},
	{0xF0, u8"ÌåÄ"},
	{0xF1, u8"ÌåÅ"},
	{0xF2, u8"ÌåÉ"},
	{0xF3, u8"ÌåÖ"},
	{0xF4, u8"Ìåå"},
	{0xF5, u8"Ìåç"},
	{0xF6, u8"Ìåé"},
	{0xF7, u8"Ìåê"},
	{0xF8, u8"Ìåî"},
	{0xF9, u8"Ìåñ"},
	{0xFA, u8"Ìåú"},
	{0xFB, u8"Ìåù"},
	{0xFC, u8"Ìåü"},
	{0xFD, u8"Ìå†"},
	{0xFE, u8"Ìå°"},
	{0xFF, u8"Ìå•"}
};

static const TextCodePair gen2TextCodesKoreanA[] = {
	{0x00, u8"Ìå®"},
	{0x01, u8"Ìå©"},
	{0x02, u8"Ìå¨"},
	{0x03, u8"Ìå∞"},
	{0x04, u8"Ìå∏"},
	{0x05, u8"Ìåπ"},
	{0x06, u8"Ìåª"},
	{0x07, u8"Ìåº"},
	{0x08, u8"ÌåΩ"},
	{0x09, u8"ÌçÑ"},
	{0x0A, u8"ÌçÖ"},
	{0x0B, u8"Ìçº"},
	{0x0C, u8"ÌçΩ"},
	{0x0D, u8"ÌéÄ"},
	{0x0E, u8"ÌéÑ"},
	{0x0F, u8"Ìéå"},
	{0x10, u8"Ìéç"},
	{0x11, u8"Ìéè"},
	{0x12, u8"Ìéê"},
	{0x13, u8"Ìéë"},
	{0x14, u8"Ìéò"},
	{0x15, u8"Ìéô"},
	{0x16, u8"Ìéú"},
	{0x17, u8"Ìé†"},
	{0x18, u8"Ìé®"},
	{0x19, u8"Ìé©"},
	{0x1A, u8"Ìé´"},
	{0x1B, u8"Ìé≠"},
	{0x1C, u8"Ìé¥"},
	{0x1D, u8"Ìé∏"},
	{0x1E, u8"Ìéº"},
	{0x1F, u8"ÌèÑ"},
	{0x20, u8"ÌèÖ"},
	{0x21, u8"Ìèà"},
	{0x22, u8"Ìèâ"},
	{0x23, u8"Ìèê"},
	{0x24, u8"Ìèò"},
	{0x25, u8"Ìè°"},
	{0x26, u8"Ìè£"},
	{0x27, u8"Ìè¨"},
	{0x28, u8"Ìè≠"},
	{0x29, u8"Ìè∞"},
	{0x2A, u8"Ìè¥"},
	{0x2B, u8"Ìèº"},
	{0x2C, u8"ÌèΩ"},
	{0x2D, u8"Ìèø"},
	{0x2E, u8"ÌêÅ"},
	{0x31, u8"Ìêà"},
	{0x32, u8"Ìêù"},
	{0x33, u8"ÌëÄ"},
	{0x34, u8"ÌëÑ"},
	{0x35, u8"Ìëú"},
	{0x36, u8"Ìë†"},
	{0x37, u8"Ìë§"},
	{0x38, u8"Ìë≠"},
	{0x39, u8"ÌëØ"},
	{0x3A, u8"Ìë∏"},
	{0x3B, u8"Ìëπ"},
	{0x3C, u8"Ìëº"},
	{0x3D, u8"Ìëø"},
	{0x3E, u8"ÌíÄ"},
	{0x3F, u8"ÌíÇ"},
	{0x40, u8"Ìíà"},
	{0x41, u8"Ìíâ"},
	{0x42, u8"Ìíã"},
	{0x43, u8"Ìíç"},
	{0x44, u8"Ìíî"},
	{0x45, u8"Ìí©"},
	{0x46, u8"Ììå"},
	{0x47, u8"Ììê"},
	{0x48, u8"Ììî"},
	{0x49, u8"Ììú"},
	{0x4A, u8"Ììü"},
	{0x4B, u8"Ìì®"},
	{0x4C, u8"Ìì¨"},
	{0x4D, u8"Ìì∞"},
	{0x4E, u8"Ìì∏"},
	{0x4F, u8"Ììª"},
	{0x60, u8"ÌìΩ"},
	{0x61, u8"ÌîÑ"},
	{0x62, u8"Ìîà"},
	{0x63, u8"Ìîå"},
	{0x64, u8"Ìîî"},
	{0x65, u8"Ìîï"},
	{0x66, u8"Ìîó"},
	{0x67, u8"Ìîº"},
	{0x68, u8"ÌîΩ"},
	{0x69, u8"ÌïÄ"},
	{0x6A, u8"ÌïÑ"},
	{0x6B, u8"Ìïå"},
	{0x6C, u8"Ìïç"},
	{0x6D, u8"Ìïè"},
	{0x6E, u8"Ìïë"},
	{0x6F, u8"Ìïò"},
	{0x70, u8"Ìïô"},
	{0x71, u8"Ìïú"},
	{0x72, u8"Ìï†"},
	{0x73, u8"Ìï•"},
	{0x74, u8"Ìï®"},
	{0x75, u8"Ìï©"},
	{0x76, u8"Ìï´"},
	{0x77, u8"Ìï≠"},
	{0x78, u8"Ìï¥"},
	{0x79, u8"Ìïµ"},
	{0x7A, u8"Ìï∏"},
	{0x7B, u8"Ìïº"},
	{0x7C, u8"ÌñÑ"},
	{0x7D, u8"ÌñÖ"},
	{0x7E, u8"Ìñá"},
	{0x7F, u8"Ìñà"},
	{0x80, u8"Ìñâ"},
	{0x81, u8"Ìñê"},
	{0x82, u8"Ìñ•"},
	{0x83, u8"Ìóà"},
	{0x84, u8"Ìóâ"},
	{0x85, u8"Ìóå"},
	{0x86, u8"Ìóê"},
	{0x87, u8"Ìóí"},
	{0x88, u8"Ìóò"},
	{0x89, u8"Ìóô"},
	{0x8A, u8"Ìóõ"},
	{0x8B, u8"Ìóù"},
	{0x8C, u8"Ìó§"},
	{0x8D, u8"Ìó•"},
	{0x8E, u8"Ìó®"},
	{0x8F, u8"Ìó¨"},
	{0x90, u8"Ìó¥"},
	{0x91, u8"Ìóµ"},
	{0x92, u8"Ìó∑"},
	{0x93, u8"Ìóπ"},
	{0x94, u8"ÌòÄ"},
	{0x95, u8"ÌòÅ"},
	{0x96, u8"ÌòÑ"},
	{0x97, u8"Ìòà"},
	{0x98, u8"Ìòê"},
	{0x99, u8"Ìòë"},
	{0x9A, u8"Ìòì"},
	{0x9B, u8"Ìòî"},
	{0x9C, u8"Ìòï"},
	{0x9D, u8"Ìòú"},
	{0x9E, u8"Ìò†"},
	{0xA1, u8"Ìò§"},
	{0xA2, u8"Ìò≠"},
	{0xA3, u8"Ìò∏"},
	{0xA4, u8"Ìòπ"},
	{0xA5, u8"Ìòº"},
	{0xA6, u8"ÌôÄ"},
	{0xA7, u8"ÌôÖ"},
	{0xA8, u8"Ìôà"},
	{0xA9, u8"Ìôâ"},
	{0xAA, u8"Ìôã"},
	{0xAB, u8"Ìôç"},
	{0xAC, u8"Ìôë"},
	{0xAD, u8"Ìôî"},
	{0xAE, u8"Ìôï"},
	{0xAF, u8"Ìôò"},
	{0xB0, u8"Ìôú"},
	{0xB1, u8"Ìôß"},
	{0xB2, u8"Ìô©"},
	{0xB3, u8"Ìô∞"},
	{0xB4, u8"Ìô±"},
	{0xB5, u8"Ìô¥"},
	{0xB6, u8"ÌöÉ"},
	{0xB7, u8"ÌöÖ"},
	{0xB8, u8"Ìöå"},
	{0xB9, u8"Ìöç"},
	{0xBA, u8"Ìöê"},
	{0xBB, u8"Ìöî"},
	{0xBC, u8"Ìöù"},
	{0xBD, u8"Ìöü"},
	{0xBE, u8"Ìö°"},
	{0xBF, u8"Ìö®"},
	{0xC0, u8"Ìö¨"},
	{0xC1, u8"Ìö∞"},
	{0xC2, u8"Ìöπ"},
	{0xC3, u8"Ìöª"},
	{0xC4, u8"ÌõÑ"},
	{0xC5, u8"ÌõÖ"},
	{0xC6, u8"Ìõà"},
	{0xC7, u8"Ìõå"},
	{0xC8, u8"Ìõë"},
	{0xC9, u8"Ìõî"},
	{0xCA, u8"Ìõó"},
	{0xCB, u8"Ìõô"},
	{0xCC, u8"Ìõ†"},
	{0xCD, u8"Ìõ§"},
	{0xCE, u8"Ìõ®"},
	{0xCF, u8"Ìõ∞"},
	{0xD0, u8"Ìõµ"},
	{0xD1, u8"Ìõº"},
	{0xD2, u8"ÌõΩ"},
	{0xD3, u8"ÌúÄ"},
	{0xD4, u8"ÌúÑ"},
	{0xD5, u8"Ìúë"},
	{0xD6, u8"Ìúò"},
	{0xD7, u8"Ìúô"},
	{0xD8, u8"Ìúú"},
	{0xD9, u8"Ìú†"},
	{0xDA, u8"Ìú®"},
	{0xDB, u8"Ìú©"},
	{0xDC, u8"Ìú´"},
	{0xDD, u8"Ìú≠"},
	{0xDE, u8"Ìú¥"},
	{0xDF, u8"Ìúµ"},
	{0xE0, u8"Ìú∏"},
	{0xE1, u8"Ìúº"},
	{0xE2, u8"ÌùÑ"},
	{0xE3, u8"Ìùá"},
	{0xE4, u8"Ìùâ"},
	{0xE5, u8"Ìùê"},
	{0xE6, u8"Ìùë"},
	{0xE7, u8"Ìùî"},
	{0xE8, u8"Ìùñ"},
	{0xE9, u8"Ìùó"},
	{0xEA, u8"Ìùò"},
	{0xEB, u8"Ìùô"},
	{0xEC, u8"Ìù†"},
	{0xED, u8"Ìù°"},
	{0xEE, u8"Ìù£"},
	{0xEF, u8"Ìù•"},
	{0xF0, u8"Ìù©"},
	{0xF1, u8"Ìù¨"},
	{0xF2, u8"Ìù∞"},
	{0xF3, u8"Ìù¥"},
	{0xF4, u8"Ìùº"},
	{0xF5, u8"ÌùΩ"},
	{0xF6, u8"ÌûÅ"},
	{0xF7, u8"Ìûà"},
	{0xF8, u8"Ìûâ"},
	{0xF9, u8"Ìûå"},
	{0xFA, u8"Ìûê"},
	{0xFB, u8"Ìûò"},
	{0xFC, u8"Ìûô"},
	{0xFD, u8"Ìûõ"},
	{0xFE, u8"Ìûù"}
};

static const TextCodePair gen2TextCodesKoreanB[] = {
	{0x00, u8"„Ñ±"},
	{0x01, u8"„Ñ¥"},
	{0x02, u8"„Ñ∑"},
	{0x03, u8"„Ñπ"},
	{0x04, u8"„ÖÅ"},
	{0x05, u8"„ÖÇ"},
	{0x06, u8"„ÖÖ"},
	{0x07, u8"„Öá"},
	{0x08, u8"„Öà"},
	{0x09, u8"„Öä"},
	{0x0A, u8"„Öã"},
	{0x0B, u8"„Öå"},
	{0x0C, u8"„Öç"},
	{0x0D, u8"„Öé"},
	{0x0E, u8"„Ñ≤"},
	{0x0F, u8"„Ñ∏"},
	{0x10, u8"„ÖÉ"},
	{0x11, u8"„ÖÜ"},
	{0x12, u8"„Öâ"},
	{0x20, u8"„Öè"},
	{0x21, u8"„Öë"},
	{0x22, u8"„Öì"},
	{0x23, u8"„Öï"},
	{0x24, u8"„Öó"},
	{0x25, u8"„Öõ"},
	{0x26, u8"„Öú"},
	{0x27, u8"„Ö†"},
	{0x28, u8"„Ö°"},
	{0x29, u8"„Ö£"},
	{0x2A, u8"„Öê"},
	{0x2B, u8"„Öí"},
	{0x2C, u8"„Öî"},
	{0x2D, u8"„Öñ"},
	{0x2E, u8"„Öò"},
	{0x2F, u8"„Öô"},
	{0x30, u8"„Öö"},
	{0x31, u8"„Öù"},
	{0x32, u8"„Öû"},
	{0x33, u8"„Öü"},
	{0x34, u8"„Ö¢"},
	{0x3E, u8"_"},
	{0x3F, u8"-"},
	{0x60, u8"„Äå"},
	{0x61, u8"„Äç"},
	{0x62, u8"„Äé"},
	{0x63, u8"„Äè"},
	{0x64, u8"("},
	{0x65, u8")"},
	{0x66, u8"!"},
	{0x67, u8"?"},
	{0x68, u8"-"},
	{0x69, u8"~"},
	{0x6A, u8"‚Ä¶"},
	{0x6B, u8","},
	{0x6C, u8"."},
	{0xF0, u8"0"},
	{0xF1, u8"1"},
	{0xF2, u8"2"},
	{0xF3, u8"3"},
	{0xF4, u8"4"},
	{0xF5, u8"5"},
	{0xF6, u8"6"},
	{0xF7, u8"7"},
	{0xF8, u8"8"},
	{0xF9, u8"9"}
};

static uint16_t decodeKoreanPokeText(const uint8_t *inputBuffer, uint16_t inputBufferLength, char *outputBuffer, uint16_t outputBufferLength)
{
	uint16_t result = 0;
	if(inputBufferLength > outputBufferLength)
	{
		return result;
	}

	const uint8_t* curInput = (const uint8_t*)inputBuffer;
	const uint8_t* endInput = curInput + inputBufferLength;
	uint8_t* curOutput = (uint8_t*)outputBuffer;
	uint16_t remainingBufferSpace = outputBufferLength;
	const struct TextCodePair* textCodes;
	uint16_t numTextCodes;

	const TextCodePair* charSets[] = {
		gen2TextCodesKorean0,
		gen2TextCodesKorean1,
		gen2TextCodesKorean2,
		gen2TextCodesKorean3,
		gen2TextCodesKorean4,
		gen2TextCodesKorean5,
		gen2TextCodesKorean6,
		gen2TextCodesKorean7,
		gen2TextCodesKorean8,
		gen2TextCodesKorean9,
		gen2TextCodesKoreanA,
		gen2TextCodesKoreanB
	};

	const uint16_t charSetNumChars[] = {
		sizeof(gen2TextCodesKorean0) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean1) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean2) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean3) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean4) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean5) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean6) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean7) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean8) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean9) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKoreanA) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKoreanB) / sizeof(TextCodePair)
	};

	while(curInput < endInput)
	{
		if((*curInput) == 0x50)
		{
			break;
		}
		else if((*curInput) < 0xC)
		{
			// the current byte refers to the prefix of one of those additional Korean
			// character sets
			textCodes = charSets[(*curInput)];
			numTextCodes = charSetNumChars[(*curInput)];
			// The next input byte value refers to the offset in the character set
			++curInput;
		}
		else
		{
			// allright, the current byte instead refers to the actual offset
			// in the main character set.
			textCodes = gen2TextCodesMain;
			numTextCodes = sizeof(gen2TextCodesMain) / sizeof(TextCodePair);
		}

		const char* outputText = findCharsByTextCode(textCodes, numTextCodes, (*curInput));
		if(!outputText)
		{
			outputText = " ";
		}
		const size_t outputTextLength = strlen(outputText);

		if(remainingBufferSpace < outputTextLength + 1)
		{
			// not enough space left: truncated
			memcpy(curOutput, outputText, remainingBufferSpace - 1);
			outputBuffer[outputBufferLength -1] = '\0';
			return outputBufferLength - 1;
		}

		memcpy(curOutput, outputText, outputTextLength);
		curOutput += outputTextLength;
		result += outputTextLength;
		remainingBufferSpace -= outputTextLength;

		++curInput;
	}
	// terminator byte
	(*curOutput) = '\0';
	return result;
}

/**
 * This function determines whether the given byte is the first byte of a UTF8 character.
 * It does this by checking the first 2 bits for the 10 sequence.
 *
 * The first byte will NEVER have the first 2 bits set to 10, regardless of the number of bytes of the character.
 * But all subsequent bytes DO.
 *
 * https://www.quora.com/In-Unicode-UTF-8-how-do-we-know-the-start-and-the-end-of-a-character-since-characters-vary-in-length
 * https://en.wikipedia.org/wiki/UTF-8
 */
static bool isStartOfUTF8Character(uint8_t byte)
{
	return (byte & 0xC0) != 0x80;
}

/**
 * This function encodes a Korean text into the game-specific format using the available Korean character sets
 * https://bulbapedia.bulbagarden.net/wiki/Korean_character_encoding_(Generation_II)
 */
static uint16_t encodeKoreanPokeText(const char *inputBuffer, uint16_t inputBufferLength, uint8_t *outputBuffer, uint16_t outputBufferLength, uint8_t terminator)
{
	// a UTF8 encodes a character in 1-4 bytes. We'll reserve another one for the null terminator
	char singleChar[5];
	uint8_t byteCount = 0;
	const char* inCur = inputBuffer;
	const char* const inEnd = inputBuffer + inputBufferLength;
	uint8_t* outputCur = outputBuffer;
	uint8_t* const outputBufferEnd = outputBuffer + outputBufferLength;
	uint16_t needleLength;
	uint8_t code;
	uint8_t i;
	bool foundCode;

	// to avoid repeating the findTextcodeByString pattern below in an if-else structure
	// we'll just define a list of charsets and go through this list.
	const TextCodePair* charSets[] = {
		gen2TextCodesMain,
		gen2TextCodesKorean0,
		gen2TextCodesKorean1,
		gen2TextCodesKorean2,
		gen2TextCodesKorean3,
		gen2TextCodesKorean4,
		gen2TextCodesKorean5,
		gen2TextCodesKorean6,
		gen2TextCodesKorean7,
		gen2TextCodesKorean8,
		gen2TextCodesKorean9,
		gen2TextCodesKoreanA,
		gen2TextCodesKoreanB
	};

	const uint16_t charSetNumChars[] = {
		sizeof(gen2TextCodesMain)    / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean0) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean1) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean2) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean3) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean4) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean5) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean6) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean7) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean8) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKorean9) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKoreanA) / sizeof(TextCodePair),
		sizeof(gen2TextCodesKoreanB) / sizeof(TextCodePair)
	};

	// Yes, the = in the while condition is not a bug. We need it to deal with the last character
	// (I can't rely on the detection of a next character, but I don't want to repeat code)
	// it does mean that I'll have to be careful to deal with this use case (inCur == inEnd) properly. I should make sure not to go out of bounds
	while(inCur <= inEnd)
	{
		// There are 3 cases to deal with here:
		// - the current byte is the first byte of the string
		// - the current byte is the first byte of the next utf8 character (meaning we fully copied all bytes of the previous one)
		// - we're actually at the end of the inputBuffer. But we still need to process the last character.
		//
		// In 2nd and 3rd case, we can start looking up the textcode of the previous char (contained in singleChar) and add it to the outputBuffer
		if(((inCur == inEnd) || isStartOfUTF8Character(*inCur)) && byteCount)
		{
			// We copied a complete utf8 character into singleChar
			// now we can try finding it
			singleChar[byteCount] = '\0';
			foundCode = false;

			// try to find the character in all the relevant charsets.
			for(i = 0; i < sizeof(charSetNumChars) / sizeof(uint16_t); ++i)
			{
				if(findTextcodeByString(charSets[i], charSetNumChars[i], singleChar, byteCount, code, needleLength))
				{
					// if i > 0, then it means the character was not found in the main charset.
					// Therefore we need to insert the index - 1 into the output. The -1 is needed because
					// the to-be-inserted index byte only refers to the index of gen2TextCodesKoreanX charsets. So gen2TextCodesMain should not be included.
					if(i)
					{
						(*outputCur) = i - 1;
						++outputCur;
					}
					(*outputCur) = code;
					++outputCur;
					foundCode = true;
					break;
				}
			}

			byteCount = 0;

			if(!foundCode)
			{
				// many empty spots in the korean character maps end up outputting a space character.
				// however, for most dialog, 0x7F is used to represent a space.
				// And for player input, 0x0B 0xFF is used to represent a space.
				// in our code, we assume the latter use case if we can't find a textCode
				// source: https://bulbapedia.bulbagarden.net/wiki/Korean_character_encoding_(Generation_II)
				(*outputCur) = 0x0B;
				++outputCur;
				(*outputCur) = 0xFF;
				++outputCur;
			}

			if(inCur == inEnd)
			{
				// allright, we dealt with the last character in the input string. There are no more characters, so
				// we need to bail out of the while loop before we end up dereferencing inCur while being out of bounds
				break;
			}

			// We stop trying to process input if we don't have any space left in our outputBuffer
			// This is not entirely foolproof because we aren't checking this for every to-be-inserted byte.
			// so in case the code above ends up inserting 2 bytes while we only have room for 1, we'll go out of bounds.
			// For security reasons this might be problematic. However, I don't expect us to use this function for processing
			// actual user input. Instead I think it might just be used to look up some strings we expect in the rom.
			// So I don't think we need to care much about it.
			// TODO: revisit this if it turns out to be a problem.
			if(outputCur >= outputBufferEnd)
			{
				break;
			}
		}
		singleChar[byteCount] = *inCur;
		++inCur;
		++byteCount;
	}
	// if there's room for a terminator, add it.
	if(outputCur < outputBufferEnd)
	{
		(*outputCur) = terminator;
		// for consistency, we need to include the terminator in the byte count returned
		++outputCur;
	}
	return static_cast<uint16_t>(outputCur - outputBuffer);
}

Gen2ItemList::Gen2ItemList(ISaveManager &saveManager, Gen2ItemListType type, Gen2GameType gameType, Gen2LocalizationLanguage localization)
	: saveManager_(saveManager)
	, type_(type)
	, gameType_(gameType)
	, localization_(localization)
{
}

uint8_t Gen2ItemList::getCount()
{
	uint8_t result;
	if (!seekToBasePos())
	{
		return 0;
	}

	if (!saveManager_.readByte(result))
	{
		result = 0;
	}
	return result;
}

uint8_t Gen2ItemList::getCapacity()
{
	return (type_ == Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET) ? 26 : 20;
}

bool Gen2ItemList::getEntry(uint8_t index, uint8_t &outItemId, uint8_t &outCount)
{
	if (!seekToBasePos())
	{
		return false;
	}

	// It looks like the key item pocket doesn't have a count value.
	// During my test if I try to write a GS ball with count 1 to crystal and store the count value, I get a random master ball showing up (which has itemId 1)
	// before the gs ball in the list.
	const uint32_t advanceAmount = (type_ == Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET) ? 1 + index : 1 + (index * 2);
	if (!saveManager_.advance(advanceAmount))
	{
		return false;
	}

	return getNextEntry(outItemId, outCount);
}

bool Gen2ItemList::getNextEntry(uint8_t &outItemId, uint8_t &outCount)
{
	const uint8_t peekByte = saveManager_.peek();

	// 0xFF is the terminator byte
	if(peekByte == 0xFF)
	{
		return false;
	}

	// 2 things here:
	// - The bulbapedia article: https://bulbapedia.bulbagarden.net/wiki/Save_data_structure_(Generation_II)#Item_lists
	//   gets the order of count vs itemId wrong. At least during my tests with a Pok√©mon crystal AND gold save
	// - The key item pocket doesn't appear to store a count value at all.
	//   see my other comment at ::getEntry() for more info
	saveManager_.readByte(outItemId);
	if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
	{
		saveManager_.readByte(outCount);
	}
	else
	{
		outCount = 1;
	}

	return true;
}

bool Gen2ItemList::add(uint8_t itemId, uint8_t itemCount)
{
	uint8_t curItemId;
	uint8_t curItemCount;
	const uint8_t numItems = getCount();
	
	// search for an existing item entry
	// if found, we'll increase the itemcount
	// if not found, the internal position of the savemanager will have conveniently moved
	// to the position we'd actually need to write the new entry to
	while(getNextEntry(curItemId, curItemCount))
	{
		if(curItemId == itemId)
		{
			// the key item pocket doesn't appear to have a count field per entry.
			// For more info see the related comment @getEntry()
			if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
			{
				uint8_t newCount = curItemCount + itemCount;
				if(newCount > 99)
				{
					newCount = 99;
				}
				saveManager_.rewind(1); // count is the second field of each entry (yes, Bulbapedia appears to get it wrong here)
				saveManager_.writeByte(newCount);
				saveManager_.advance();
			}
			return true;
		}
	}

	// no existing entry found in the itemlist
	// first check if there's any room left for the new item
	if(numItems >= getCapacity())
	{
		return false;
	}
	
	// Bulbapedia gets the order wrong here. itemId should go first, then itemCount
	// at least this is the case during my tests with a Pok√©mon Crystal AND Gold save
	saveManager_.writeByte(itemId);
	// in the while loop, getNextEntry has returned false on the last iteration, so that means
	// we've arrived at the terminator of the list. This is the exact position at which we need to write our new entry.
	// convenient, isn't it?
	// so let's write the new entry...
	if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
	{
		// the key item pocket doesn't appear to have a count field per entry.
		// For more info see the related comment @getEntry()
		saveManager_.writeByte(itemCount);
	}
	// now write the new terminator
	saveManager_.writeByte(0xFF);

	// the only thing left is to increase the list counter
	seekToBasePos();
	saveManager_.writeByte(numItems + 1);
	
	return true;
}

bool Gen2ItemList::remove(uint8_t itemId)
{
	uint8_t curItemId;
	uint8_t curItemCount;

	const uint8_t numItems = getCount();

	// search for an existing item entry
	// if found, we'll increase the itemcount
	// if not found, the internal position of the savemanager will have conveniently moved
	// to the position we'd actually need to write the new entry to
	while(getNextEntry(curItemId, curItemCount))
	{
		if(curItemId == itemId)
		{
			break;
		}
	}

	if(curItemId != itemId)
	{
		return false;
	}

	while(getNextEntry(curItemId, curItemCount))
	{
		// okay, we need to rewind to the item we want to replace first. right now we're just past the item we just read to replace it with
		if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
		{
			saveManager_.rewind(4);
		}
		else
		{
			// the key item pocket doesn't appear to have a count field per entry.
			saveManager_.rewind(2);
		}
		saveManager_.writeByte(curItemId);
		if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
		{
			// the key item pocket doesn't appear to have a count field per entry.
			// For more info see the related comment @getEntry()
			saveManager_.writeByte(curItemCount);
		}

		// now we need to advance 1 item to make sure we're not reading the same entry again on the next loop
		if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
		{
			saveManager_.advance(2);
		}
		else
		{
			// the key item pocket doesn't appear to have a count field per entry.
			saveManager_.advance(1);
		}
	}

	if(type_ != Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET)
	{
		saveManager_.rewind(2);
	}
	else
	{
		saveManager_.rewind(1);
	}

	// now write the new terminator
	saveManager_.writeByte(0xFF);

	// the only thing left is to increase the list counter
	seekToBasePos();
	saveManager_.writeByte(numItems - 1);

	return true;
}

bool Gen2ItemList::seekToBasePos()
{
	uint32_t offset;
	const Gen2LocalizationSRAMOffsets& sramOffsets = gen2_getSRAMOffsets(gameType_, localization_);
	switch (type_)
	{
	case GEN2_ITEMLISTTYPE_TMHM:
		offset = sramOffsets.itemPocketTMHM;
		break;
	case GEN2_ITEMLISTTYPE_ITEMPOCKET:
		offset = sramOffsets.itemPocketItem;
		break;
	case GEN2_ITEMLISTTYPE_KEYITEMPOCKET:
		offset = sramOffsets.itemPocketKey;
		break;
	case GEN2_ITEMLISTTYPE_BALLPOCKET:
		offset = sramOffsets.itemPocketBall;
		break;
	case GEN2_ITEMLISTTYPE_PC:
		offset = sramOffsets.itemPocketPC;
		break;
	default:
		return false;
	}

	return saveManager_.seek(offset);
}

Gen2Checksum::Gen2Checksum()
	: checksum_(0)
{
}

void Gen2Checksum::addByte(uint8_t byte)
{
	checksum_ += byte;
}

uint16_t Gen2Checksum::get() const
{
	return checksum_;
}

Gen2GameType gen2_determineGameType(const GameboyCartridgeHeader& cartridgeHeader)
{
	Gen2GameType result;
	if (strncmp(cartridgeHeader.title, POKEMON_GOLD_CARTRIDGE_TITLE, sizeof(POKEMON_GOLD_CARTRIDGE_TITLE) - 1) == 0)
    {
        result = Gen2GameType::GOLD;
    }
    else if (strncmp(cartridgeHeader.title, POKEMON_SILVER_CARTRIDGE_TITLE, sizeof(POKEMON_SILVER_CARTRIDGE_TITLE) - 1) == 0)
    {
        result = Gen2GameType::SILVER;
    }
    else if (strncmp(cartridgeHeader.title, POKEMON_CRYSTAL_CARTRIDGE_TITLE, sizeof(POKEMON_CRYSTAL_CARTRIDGE_TITLE) - 1) == 0)
    {
        result = Gen2GameType::CRYSTAL;
    }
	else
	{
		result = Gen2GameType::INVALID;
	}
	return result;
}

Gen2LocalizationLanguage gen2_determineGameLanguage(IRomReader& romReader, Gen2GameType gameType)
{
	// The pokemon index-to-pokedex-number map has a unique rom offset in each of the game localizations.
	// It also should have the exact same data in all gen 1 games and all of their localizations.
	// Therefore we can use a fingerprint byte pattern to check these locations to figure out which localization we have.
	uint8_t buffer[sizeof(gen2_statsFingerPrint)];

	for(uint8_t i=0; i < static_cast<uint8_t>(Gen2LocalizationLanguage::MAX); ++i)
	{
		const Gen2LocalizationRomOffsets& romOffsetList = gen2_getRomOffsets(gameType, (Gen2LocalizationLanguage)i);
		romReader.seek(romOffsetList.stats);
		romReader.read(buffer, sizeof(gen2_statsFingerPrint));
		if(memcmp(buffer, gen2_statsFingerPrint, sizeof(gen2_statsFingerPrint)) == 0)
		{
			// stats fingerprint match at the current languages' stats offset.

			// For pok√©mon gold & pok√©mon silver, however, the spanish and italian localizations use the exact same stats rom offset.
			// The only difference we can really check for -given the rom offsets we possess right now- is the names offset.
			// that's the only one that is unique for these
			// both of these games use the original English names though. So it's just a matter of the offsets being different
			if(gameType != Gen2GameType::CRYSTAL && (i == (uint8_t)Gen2LocalizationLanguage::ITALIAN || i == (uint8_t)Gen2LocalizationLanguage::SPANISH))
			{
				uint8_t nameBuffer[0xB];
				const char* firstPokemon = "BULBASAUR";
				// both languages are luckily also using our main character set. So we don't have to worry about that
				const uint16_t nameLength = gen2_encodePokeText(firstPokemon, strlen(firstPokemon), nameBuffer, sizeof(nameBuffer), 0x50);

				romReader.seek(romOffsetList.names);
				romReader.read(buffer, nameLength);

				const int ret = memcmp(buffer, nameBuffer, nameLength - 1);
				if(ret != 0)
				{
					// no match at the current offset. Skip to the next language
					continue;
				}
				// if we get here, we have a full match. So we know which language we're dealing with now!
				// Therefore we will end up at the return statement below
			}
			return (Gen2LocalizationLanguage)i;
		}
	}

	return Gen2LocalizationLanguage::MAX;
}

void gen2_recalculatePokeStats(Gen2GameReader &reader, Gen2TrainerPokemon &poke)
{
	Gen2PokeStats stats;
	reader.readPokemonStatsForIndex(poke.poke_index, stats);

	poke.max_hp = calculatePokeStat(PokeStat::HP, stats.base_hp, getStatIV(PokeStat::HP, poke.iv_data), poke.hp_effort_value, poke.level);
	poke.atk = calculatePokeStat(PokeStat::ATK, stats.base_attack, getStatIV(PokeStat::ATK, poke.iv_data), poke.atk_effort_value, poke.level);
	poke.def = calculatePokeStat(PokeStat::DEF, stats.base_defense, getStatIV(PokeStat::DEF, poke.iv_data), poke.def_effort_value, poke.level);
	poke.speed = calculatePokeStat(PokeStat::SPEED, stats.base_speed, getStatIV(PokeStat::SPEED, poke.iv_data), poke.speed_effort_value, poke.level);
	poke.special_atk = calculatePokeStat(PokeStat::SPECIAL_ATK, stats.base_special_attack, getStatIV(PokeStat::SPECIAL_ATK, poke.iv_data), poke.special_effort_value, poke.level);
	poke.special_def = calculatePokeStat(PokeStat::SPECIAL_DEF, stats.base_special_defense, getStatIV(PokeStat::SPECIAL_DEF, poke.iv_data), poke.special_effort_value, poke.level);
}

uint16_t gen2_decodePokeText(const uint8_t *inputBuffer, uint16_t inputBufferLength, char *outputBuffer, uint16_t outputBufferLength, Gen2LocalizationLanguage language)
{
	const TextCodePair* textCodes;
	uint16_t numEntries;

	switch(language)
	{
	case Gen2LocalizationLanguage::KOREAN:
		return decodeKoreanPokeText(inputBuffer, inputBufferLength, outputBuffer, outputBufferLength);
	case Gen2LocalizationLanguage::JAPANESE:
		textCodes = gen2TextCodesJpn;
		numEntries = sizeof(gen2TextCodesJpn) / sizeof(struct TextCodePair);
		break;
	default:
		textCodes = gen2TextCodesMain;
		numEntries = sizeof(gen2TextCodesMain) / sizeof(struct TextCodePair);
	}

	return decodeText(textCodes, numEntries, inputBuffer, inputBufferLength, outputBuffer, outputBufferLength);
}

uint16_t gen2_encodePokeText(const char *inputBuffer, uint16_t inputBufferLength, uint8_t *outputBuffer, uint16_t outputBufferLength, uint8_t terminator, Gen2LocalizationLanguage language)
{
	const TextCodePair* textCodes;
	uint16_t numEntries;

	switch(language)
	{
	case Gen2LocalizationLanguage::KOREAN:
		return encodeKoreanPokeText(inputBuffer, inputBufferLength, outputBuffer, outputBufferLength, terminator);
	case Gen2LocalizationLanguage::JAPANESE:
		textCodes = gen2TextCodesJpn;
		numEntries = sizeof(gen2TextCodesJpn) / sizeof(struct TextCodePair);
		break;
	default:
		textCodes = gen2TextCodesMain;
		numEntries = sizeof(gen2TextCodesMain) / sizeof(struct TextCodePair);
		break;
	}

	return encodeText(textCodes, numEntries, inputBuffer, inputBufferLength, outputBuffer, outputBufferLength, terminator);
}

bool gen2_isPokemonShiny(Gen2TrainerPokemon& poke)
{
    // based on https://bulbapedia.bulbagarden.net/wiki/Shiny_Pok%C3%A9mon#Determining_Shininess
    const PokeStat statsToCheckFor10[] = {PokeStat::SPEED, PokeStat::DEF, PokeStat::SPECIAL};

    for(uint8_t i=0; i < (sizeof(statsToCheckFor10) / sizeof(statsToCheckFor10[0])); ++i)
    {
        if(getStatIV(statsToCheckFor10[i], poke.iv_data) != 10)
        {
            return false;
        }
    }

    switch(getStatIV(PokeStat::ATK, poke.iv_data))
    {
        case 2:
        case 3:
        case 6:
        case 7:
        case 10:
        case 11:
        case 14:
        case 15:
            return true;
        default:
            break;
    }
    return false;
}

void gen2_makePokemonShiny(Gen2TrainerPokemon& poke)
{
	const uint8_t validAtkValues[] = { 2, 3, 6, 7, 10, 11, 14, 15 };
	uint8_t i;
	bool atkValid = false;

	uint8_t atkIV = getStatIV(PokeStat::ATK, poke.iv_data);
	
	for(i=0; i < sizeof(validAtkValues); ++i)
	{
		if(atkIV == validAtkValues[i])
		{
			atkValid = true;
			break;
		}
	}

	if(!atkValid)
	{
		i = rand() % sizeof(validAtkValues);
		atkIV = validAtkValues[i];
	}

	// the first 4 bits need to be the valid atk IV (one of the validAtkValues list values)
	// all the other groups of 4 bits need to be set to 10 (SPEED, DEFENSE, SPECIAL)
	poke.iv_data[0] = (atkIV << 4) | 0xA;
	poke.iv_data[1] = 0xAA;
}

const char* gen2_getItemListTypeString(Gen2ItemListType type)
{
	switch(type)
	{
		case Gen2ItemListType::GEN2_ITEMLISTTYPE_TMHM:
			return "TM/HM Pocket";
		case Gen2ItemListType::GEN2_ITEMLISTTYPE_ITEMPOCKET:
			return "Item Pocket";
		case Gen2ItemListType::GEN2_ITEMLISTTYPE_KEYITEMPOCKET:
			return "Key Item Pocket";
		case Gen2ItemListType::GEN2_ITEMLISTTYPE_BALLPOCKET:
			return "Ball Pocket";
		case Gen2ItemListType::GEN2_ITEMLISTTYPE_PC:
			return "PC";
		default:
			return "Invalid";
	}
}

void gen2_prepareDistributionPokemon(Gen2GameReader& gameReader, const Gen2DistributionPokemon& distributionPoke, Gen2TrainerPokemon& poke, const char*& originalTrainerName)
{
    if (distributionPoke.setPlayerAsOriginalTrainer)
    {
        originalTrainerName = gameReader.getTrainerName();
        poke.original_trainer_ID = gameReader.getTrainerID();
    }
    else
    {
		const Gen2LocalizationLanguage gameLang = gameReader.getGameLanguage();

		if(gameLang == Gen2LocalizationLanguage::JAPANESE && !distributionPoke.isJapanese)
		{
			// The Japanese games don't have all the latin characters in their character set.
			// So if transferring a non-japanese distribution event pok√©mon to a japanese cartridge,
			// we need to replace the OT.
			// If Google Translate is any reliable, „Éù„Ç±„É°64 should translate to "Pokeme 64".
			originalTrainerName = "„Éù„Ç±„É°64";
		}
		else if(gameLang != Gen2LocalizationLanguage::JAPANESE && distributionPoke.isJapanese)
		{
			// Obviously non-japanese cartridges/roms don't have the japanese characters in their character set.
			// So if transferring a japanese distribution event pok√©mon to a non-japanese cartridge,
			// we need to replace the OT.
			// We'll replace it with PokeMe64
			originalTrainerName = "PokeMe64";
		}
		else
		{
			originalTrainerName = distributionPoke.originalTrainer;
		}

        if (distributionPoke.regenerateTrainerID)
        {
            if (distributionPoke.originalTrainerID)
            {
                // limit set, apply it
                poke.original_trainer_ID = (uint16_t)(rand() % distributionPoke.originalTrainerID);
            }
            else
            {
                // no limit. The max is the max of the uint16_t type
                poke.original_trainer_ID = (uint16_t)(rand() % UINT16_MAX);
            }
        }
        else
        {
            poke.original_trainer_ID = distributionPoke.originalTrainerID;
        }
    }

    if (distributionPoke.shinyChance != 0xFF && (rand() % 100) <= distributionPoke.shinyChance)
    {
        // the pokemon will be shiny
        gen2_makePokemonShiny(poke);
    }
    else if (distributionPoke.randomizeIVs)
    {
        const uint16_t randomVal = (uint16_t)rand();
        poke.iv_data[0] = (uint8_t)(randomVal >> 8);
        poke.iv_data[1] = (uint8_t)(randomVal & 0xFF);
    }
    else
    {
        poke.iv_data[0] = distributionPoke.iv_data[0];
        poke.iv_data[1] = distributionPoke.iv_data[1];
    }
}